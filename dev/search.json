[{"path":"https://mlr3hyperband.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Becker. Author, maintainer. Sebastian Gruber. Author. Jakob Richter. Author. Julia Moosbauer. Author. Bernd Bischl. Author.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker M, Gruber S, Richter J, Moosbauer J, Bischl B (2022). mlr3hyperband: Hyperband 'mlr3'. https://mlr3hyperband.mlr-org.com, https://github.com/mlr-org/mlr3hyperband.","code":"@Manual{,   title = {mlr3hyperband: Hyperband for 'mlr3'},   author = {Marc Becker and Sebastian Gruber and Jakob Richter and Julia Moosbauer and Bernd Bischl},   year = {2022},   note = {https://mlr3hyperband.mlr-org.com, https://github.com/mlr-org/mlr3hyperband}, }"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"mlr3hyperband","dir":"","previous_headings":"","what":"Hyperband for mlr3","title":"Hyperband for mlr3","text":"Package website: release | dev package provides hyperband tuning mlr3.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Hyperband for mlr3","text":"Install last release CRAN: Install development version GitHub:","code":"install.packages(\"mlr3hyperband\") remotes::install_github(\"mlr-org/mlr3hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Hyperband for mlr3","text":"mlr3book chapter hyperband hyperparameter tuning. original paper introducing hyperband algorithm.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"hyperband","dir":"","previous_headings":"","what":"Hyperband","title":"Hyperband for mlr3","text":"Hyperband budget oriented-procedure, weeding suboptimally performing configurations early training process aiming increasing efficiency tuning procedure. , several brackets constructed associated set configurations bracket. configuration initialized stochastic, often uniform, sampling. bracket divided multiple stages, configurations evaluated increasing budget stage. Note currently configurations trained completely beginning, online updates models performed. Different brackets initialized different number configurations, different budget sizes. identify budget evaluating hyperband, user specify explicitly hyperparameter learner influences budget tagging single hyperparameter parameter set \"budget\". alternative approach using subsampling pipelines described .","code":""},{"path":[]},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"basic","dir":"","previous_headings":"Examples","what":"Basic","title":"Hyperband for mlr3","text":"already familiar mlr3tuning, change compared tuners give numeric hyperparameter budget tag. Afterwards, can handle hyperband like tuners. Originally, hyperband created “natural” learning parameter budget parameter mind, like nrounds XGBoost learner.","code":"library(mlr3verse) library(mlr3hyperband) library(mlr3learners)  # define hyperparameter and budget parameter search_space = ps(   nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),   eta = p_dbl(lower = 0, upper = 1),   booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\")) )  # hyperparameter tuning on the pima indians diabetes data set instance = tune(   method = \"hyperband\",   task = tsk(\"pima\"),   learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   search_space = search_space )  # best performing hyperparameter configuration instance$result ##    nrounds     eta booster learner_param_vals  x_domain classif.ce ## 1:       4 0.27844  gbtree          <list[6]> <list[3]>  0.2682292"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"subsampling","dir":"","previous_headings":"Examples","what":"Subsampling","title":"Hyperband for mlr3","text":"Additionally, also possible use mlr3hyperband tune learners natural fidelity parameter. case mlr3pipelines can used define data subsampling preprocessing step. , frac parameter subsampling, defining fraction training data used, can act budget parameter.","code":"learner = po(\"subsample\") %>>% lrn(\"classif.rpart\")  # define subsampling parameter as budget search_space = ps(   classif.rpart.cp = p_dbl(lower = 0.001, upper = 0.1),   classif.rpart.minsplit = p_int(lower = 1, upper = 10),   subsample.frac = p_dbl(lower = 0.1, upper = 1, tags = \"budget\") )  # hyperparameter tuning on the pima indians diabetes data set instance = tune(   method = \"hyperband\",   task = tsk(\"pima\"),   learner = learner,   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   search_space = search_space )  # best performing hyperparameter configuration instance$result ##    classif.rpart.cp classif.rpart.minsplit subsample.frac learner_param_vals  x_domain classif.ce ## 1:        0.0246659                      5            0.5          <list[6]> <list[3]>  0.2395833"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"successive-halving","dir":"","previous_headings":"Examples","what":"Successive Halving","title":"Hyperband for mlr3","text":"","code":"library(mlr3hyperband) library(mlr3learners)  # define hyperparameter and budget parameter search_space = ps(   nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),   eta = p_dbl(lower = 0, upper = 1),   booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\")) )  # hyperparameter tuning on the pima indians diabetes data set instance = tune(   method = \"successive_halving\",   task = tsk(\"pima\"),   learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   search_space = search_space )  # best performing hyperparameter configuration instance$result ##    nrounds       eta booster learner_param_vals  x_domain classif.ce ## 1:       2 0.8726027    dart          <list[6]> <list[3]>  0.2265625"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"quick-general-purpose-optimization","dir":"","previous_headings":"Examples","what":"Quick general-purpose optimization","title":"Hyperband for mlr3","text":"","code":"library(bbotk) library(mlr3hyperband)  # define hyperparameter and budget parameter search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # modified branin function objective = ObjectiveRFun$new(   fun = branin,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # optimize branin function with hyperband result = bb_optimize(objective, method = \"hyperband\", search_space = search_space, term_evals = NULL)  # optimized parameters result$par ##          x1       x2 fidelity ## 1: 9.739074 2.508206        1 # optimal outcome result$value ##         y  ## 0.9281165"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Budget — hyperband_budget","title":"Hyperband Budget — hyperband_budget","text":"Calculates total budget used hyperband.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Budget — hyperband_budget","text":"","code":"hyperband_budget(r_min, r_max, eta, integer_budget = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Budget — hyperband_budget","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. integer_budget (logical(1)) Determines budget integer.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Budget — hyperband_budget","text":"integer(1)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Configs — hyperband_n_configs","title":"Hyperband Configs — hyperband_n_configs","text":"Calculates many different configurations sampled.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Configs — hyperband_n_configs","text":"","code":"hyperband_n_configs(r_min, r_max, eta)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Configs — hyperband_n_configs","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Configs — hyperband_n_configs","text":"integer(1)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Schedule — hyperband_schedule","title":"Hyperband Schedule — hyperband_schedule","text":"Returns hyperband schedule.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Schedule — hyperband_schedule","text":"","code":"hyperband_schedule(r_min, r_max, eta, integer_budget = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Schedule — hyperband_schedule","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. integer_budget (logical(1)) Determines budget integer.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Schedule — hyperband_schedule","text":"data.table::data.table()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr3hyperband-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","title":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","text":"Implements hyperband method hyperparameter tuning. Various termination criteria can set combined. class 'AutoTuner' provides convenient way perform nested resampling combination 'mlr3'. hyperband algorithm proposed Lisha Li, Kevin Jamieson, Giulia DeSalvo, Afshin Rostamizadeh Ameet Talwalkar (2018) <arXiv:1603.06560>.","code":""},{"path":[]},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr3hyperband-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","text":"Maintainer: Marc Becker marcbecker@posteo.de (ORCID) Authors: Sebastian Gruber gruber_sebastian@t-online.de (ORCID) Jakob Richter jakob1richter@gmail.com (ORCID) Julia Moosbauer ju.moosbauer@googlemail.com (ORCID) Bernd Bischl bernd_bischl@gmx.net (ORCID)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"OptimizerHyperband class implements hyperband optimization. Hyperband budget oriented-procedure, weeding suboptimal performing points early sequential training process, increasing optimization efficiency consequence. , several brackets constructed associated set points bracket. bracket several stages. Different brackets initialized different amounts points different budget sizes. get idea bracket layout looks like given argument set, use hyperband_schedule(). identify budget evaluating hyperband, user specify explicitly parameter objective function influences budget tagging single parameter paradox::ParamSet \"budget\". Naturally, hyperband terminates brackets evaluated, bbotk::Terminator bbotk::OptimInstanceSingleCrit | bbotk::OptimInstanceMultiCrit acts upper bound set low value one unsure long hyperband take finish given settings.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Li L, Jamieson K, DeSalvo G, Rostamizadeh , Talwalkar (2018). “Hyperband: Novel Bandit-Based Approach Hyperparameter Optimization.” Journal Machine Learning Research, 18(185), 1-52. https://jmlr.org/papers/v18/16-558.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"hyperband\") opt(\"hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"eta numeric(1) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn initialization bracket. default uniform sampling. repeats logical(1) FALSE (default), hyperband terminates brackets evaluated. Otherwise, hyperband starts last bracket evaluated.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"bbotk::Archive holds following additional columns specific hyperband algorithm: bracket (integer(1)) bracket index. Counts 0. stage (integer(1)) stages bracket. Starts counting 0.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom sampler","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"runtime","dir":"Reference","previous_headings":"","what":"Runtime","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"calculation bracket currently assumes linear runtime chosen budget parameter always given. Hyperband designed bracket requires approximately runtime sum budget configurations bracket roughly . hold true scaling budget parameter linear anymore, even though sum budgets bracket remains . possible adaption introduce trafo, like shown examples section.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"order support general termination criteria parallelization, evaluate points batch-fashion size batch_size. points one stage bracket evaluated one batch. Parallelization supported via package future (see mlr3::benchmark()'s section parallelization details).","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"bbotk::Optimizer -> OptimizerHyperband","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"bbotk::Optimizer$format() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"OptimizerHyperband$new() OptimizerHyperband$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"","code":"OptimizerHyperband$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"","code":"OptimizerHyperband$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"","code":"library(bbotk) library(data.table)  search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # modified branin function objective = ObjectiveRFun$new(   fun = branin,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"none\") )  optimizer = opt(\"hyperband\")  # modifies the instance by reference optimizer$optimize(instance) #>         x1       x2 fidelity  x_domain         y #> 1: 3.32387 1.984601        1 <list[3]> 0.5802297  # best scoring evaluation instance$result #>         x1       x2 fidelity  x_domain         y #> 1: 3.32387 1.984601        1 <list[3]> 0.5802297  # all evaluations as.data.table(instance$archive) #>               x1        x2 fidelity bracket stage          y #>   1: -3.99483264  1.504527 0.015625       6     0 132.375429 #>   2:  0.38084804 12.156699 0.015625       6     0  64.589783 #>   3:  3.35488438  5.218064 0.015625       6     0  18.351901 #>   4:  8.31924405 14.398033 0.015625       6     0 386.352570 #>   5:  0.09404981 12.970826 0.015625       6     0  70.257485 #>  ---                                                         #> 297: -3.09032782 13.527916 1.000000       2     2   2.303269 #> 298:  2.08096649  5.591836 1.000000       2     2  10.807128 #> 299: -2.51817382  7.090957 1.000000       1     1  16.162055 #> 300:  3.17841731  5.479079 1.000000       1     1  10.854240 #> 301: -0.88387895 10.025709 1.000000       1     1  22.429807 #>                timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity #>   1: 2022-01-29 04:24:43        1 -3.99483264    1.504527          0.015625 #>   2: 2022-01-29 04:24:43        1  0.38084804   12.156699          0.015625 #>   3: 2022-01-29 04:24:43        1  3.35488438    5.218064          0.015625 #>   4: 2022-01-29 04:24:43        1  8.31924405   14.398033          0.015625 #>   5: 2022-01-29 04:24:43        1  0.09404981   12.970826          0.015625 #>  ---                                                                        #> 297: 2022-01-29 04:24:44        7 -3.09032782   13.527916          1.000000 #> 298: 2022-01-29 04:24:44        7  2.08096649    5.591836          1.000000 #> 299: 2022-01-29 04:24:44        7 -2.51817382    7.090957          1.000000 #> 300: 2022-01-29 04:24:44        7  3.17841731    5.479079          1.000000 #> 301: 2022-01-29 04:24:44        7 -0.88387895   10.025709          1.000000"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"OptimizerSuccessiveHalving class implements successive halving algorithm. algorithm samples n points evaluates smallest budget (lower bound budget parameter). every stage budget increased factor eta best 1/eta points promoted next stage. optimization terminates maximum budget reached (upper bound budget parameter). identify budget, user specify explicitly parameter objective function influences budget tagging single parameter search space (paradox::ParamSet) \"budget\".","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Jamieson K, Talwalkar (2016). “Non-stochastic Best Arm Identification Hyperparameter Optimization.” Gretton , Robert CC (eds.), Proceedings 19th International Conference Artificial Intelligence Statistics, volume 51 series Proceedings Machine Learning Research, 240-248. http://proceedings.mlr.press/v51/jamieson16.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"n integer(1) Number points first stage. eta numeric(1) every stage, point budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn initialization bracket. default uniform sampling. repeats logical(1) FALSE (default), successive halving terminates stages evaluated. Otherwise, successive halving starts last stage evaluated.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Archive holds following additional column specific successive halving algorithm: stage (integer(1)) Stage index. Starts counting 0.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom sampler","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"runtime","dir":"Reference","previous_headings":"","what":"Runtime","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"calculation bracket currently assumes linear runtime chosen budget parameter always given. Hyperband designed bracket requires approximately runtime sum budget configurations bracket roughly . hold true scaling budget parameter linear anymore, even though sum budgets bracket remains . possible adaption introduce trafo, like shown examples section.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"order support general termination criteria parallelization, evaluate points batch-fashion size batch_size. points one stage bracket evaluated one batch. Parallelization supported via package future (see mlr3::benchmark()'s section parallelization details).","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Optimizer -> OptimizerSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Optimizer$format() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"OptimizerSuccessiveHalving$new() OptimizerSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"OptimizerSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"OptimizerSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"library(bbotk) library(data.table)  search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # modified branin function objective = ObjectiveRFun$new(   fun = branin,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"none\") )  optimizer = opt(\"successive_halving\")  # modifies the instance by reference optimizer$optimize(instance) #>          x1       x2 fidelity  x_domain         y #> 1: 3.067841 1.114376     0.01 <list[3]> 0.5064102  # best scoring evaluation instance$result #>          x1       x2 fidelity  x_domain         y #> 1: 3.067841 1.114376     0.01 <list[3]> 0.5064102  # all evaluations as.data.table(instance$archive) #>             x1           x2 fidelity stage           y           timestamp #>  1: -3.0063754 13.547937084     0.01     0   6.6872565 2022-01-29 04:24:44 #>  2:  7.2513106 13.939348029     0.01     0 335.6030850 2022-01-29 04:24:44 #>  3:  0.8961876  8.778166847     0.01     0  33.4718991 2022-01-29 04:24:44 #>  4:  3.0678411  1.114375741     0.01     0   0.5064102 2022-01-29 04:24:44 #>  5:  2.2901651  3.172359302     0.01     0   4.1072961 2022-01-29 04:24:44 #>  6: -3.1785451  2.805484798     0.01     0  73.6486933 2022-01-29 04:24:44 #>  7:  2.5058241 12.379866239     0.01     0 105.8753625 2022-01-29 04:24:44 #>  8: -3.2064345  6.412160938     0.01     0  25.4317858 2022-01-29 04:24:44 #>  9:  8.4639178  9.166617683     0.01     0 214.0255716 2022-01-29 04:24:44 #> 10: -3.8999393 13.197928446     0.01     0   3.3120224 2022-01-29 04:24:44 #> 11: -4.9824436  5.570291423     0.01     0  95.5325931 2022-01-29 04:24:44 #> 12:  7.8009767  3.802158617     0.01     0  80.7484269 2022-01-29 04:24:44 #> 13:  4.5993661  7.050113288     0.01     0  68.6962923 2022-01-29 04:24:44 #> 14:  8.9318890  8.293229907     0.01     0 200.3703926 2022-01-29 04:24:44 #> 15:  8.8265268  1.428546893     0.01     0  52.8283206 2022-01-29 04:24:44 #> 16:  9.3869713  0.006575296     0.01     0  39.9272094 2022-01-29 04:24:44 #> 17:  3.0678411  1.114375741     0.02     1   0.5119028 2022-01-29 04:24:44 #> 18: -3.8999393 13.197928446     0.02     1   3.2960742 2022-01-29 04:24:44 #> 19:  2.2901651  3.172359302     0.02     1   4.1004113 2022-01-29 04:24:44 #> 20: -3.0063754 13.547937084     0.02     1   6.6423216 2022-01-29 04:24:44 #> 21: -3.2064345  6.412160938     0.02     1  25.5347319 2022-01-29 04:24:44 #> 22:  0.8961876  8.778166847     0.02     1  33.4651850 2022-01-29 04:24:44 #> 23:  9.3869713  0.006575296     0.02     1  38.8270676 2022-01-29 04:24:44 #> 24:  8.8265268  1.428546893     0.02     1  51.7242387 2022-01-29 04:24:44 #> 25:  3.0678411  1.114375741     0.04     2   0.5234193 2022-01-29 04:24:44 #> 26: -3.8999393 13.197928446     0.04     2   3.2655656 2022-01-29 04:24:44 #> 27:  2.2901651  3.172359302     0.04     2   4.0868068 2022-01-29 04:24:44 #> 28: -3.0063754 13.547937084     0.04     2   6.5529419 2022-01-29 04:24:44 #> 29:  3.0678411  1.114375741     0.08     3   0.5485784 2022-01-29 04:24:44 #> 30: -3.8999393 13.197928446     0.08     3   3.2101004 2022-01-29 04:24:44 #> 31:  3.0678411  1.114375741     0.16     4   0.6074001 2022-01-29 04:24:45 #>             x1           x2 fidelity stage           y           timestamp #>     batch_nr x_domain_x1  x_domain_x2 x_domain_fidelity #>  1:        1  -3.0063754 13.547937084              0.01 #>  2:        1   7.2513106 13.939348029              0.01 #>  3:        1   0.8961876  8.778166847              0.01 #>  4:        1   3.0678411  1.114375741              0.01 #>  5:        1   2.2901651  3.172359302              0.01 #>  6:        1  -3.1785451  2.805484798              0.01 #>  7:        1   2.5058241 12.379866239              0.01 #>  8:        1  -3.2064345  6.412160938              0.01 #>  9:        1   8.4639178  9.166617683              0.01 #> 10:        1  -3.8999393 13.197928446              0.01 #> 11:        1  -4.9824436  5.570291423              0.01 #> 12:        1   7.8009767  3.802158617              0.01 #> 13:        1   4.5993661  7.050113288              0.01 #> 14:        1   8.9318890  8.293229907              0.01 #> 15:        1   8.8265268  1.428546893              0.01 #> 16:        1   9.3869713  0.006575296              0.01 #> 17:        2   3.0678411  1.114375741              0.02 #> 18:        2  -3.8999393 13.197928446              0.02 #> 19:        2   2.2901651  3.172359302              0.02 #> 20:        2  -3.0063754 13.547937084              0.02 #> 21:        2  -3.2064345  6.412160938              0.02 #> 22:        2   0.8961876  8.778166847              0.02 #> 23:        2   9.3869713  0.006575296              0.02 #> 24:        2   8.8265268  1.428546893              0.02 #> 25:        3   3.0678411  1.114375741              0.04 #> 26:        3  -3.8999393 13.197928446              0.04 #> 27:        3   2.2901651  3.172359302              0.04 #> 28:        3  -3.0063754 13.547937084              0.04 #> 29:        4   3.0678411  1.114375741              0.08 #> 30:        4  -3.8999393 13.197928446              0.08 #> 31:        5   3.0678411  1.114375741              0.16 #>     batch_nr x_domain_x1  x_domain_x2 x_domain_fidelity"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"TunerHyperband class implements hyperband tuning. Hyperband budget oriented-procedure, weeding suboptimal performing configurations early sequential training process, increasing tuning efficiency consequence. , several brackets constructed associated set configurations bracket. bracket several stages. Different brackets initialized different amounts configurations different budget sizes. Within context hyperband evaluation learner consumes certain budget. budget fixed controlled certain hyperparameter, e.g. number boosting iterations number trees random forest. user specify explicitly hyperparameter learner controls consumption budget tagging single hyperparameter paradox::ParamSet \"budget\". alternative approach using subsampling pipelines described . Naturally, hyperband terminates brackets evaluated, bbotk::Terminator tuning instance acts upper bound set low value one unsure long hyperband take finish given settings.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Li L, Jamieson K, DeSalvo G, Rostamizadeh , Talwalkar (2018). “Hyperband: Novel Bandit-Based Approach Hyperparameter Optimization.” Journal Machine Learning Research, 18(185), 1-52. https://jmlr.org/papers/v18/16-558.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"hyperband\") opt(\"hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"eta numeric(1) Fraction parameter successive halving algorithm: every step configuration budget increased factor eta best 1/eta configurations used next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn initialization bracket. default uniform sampling.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"mlr3tuning::ArchiveTuning holds following additional columns specific hyperband algorithm: bracket (integer(1)) bracket index. Counts 0. stage (integer(1)) stages bracket. Starts counting 0.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"hyperband-without-learner-budget","dir":"Reference","previous_headings":"","what":"Hyperband without learner budget","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Thanks mlr3pipelines, possible use hyperband combination learners lacking natural budget parameter. example, mlr3::Learner can augmented mlr3pipelines::PipeOp operator mlr3pipelines::PipeOpSubsample. subsampling rate budget parameter, resulting mlr3pipelines::GraphLearner fitted small proportions mlr3::Task first brackets, complete Task last brackets. See examples code.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom sampler","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"runtime","dir":"Reference","previous_headings":"","what":"Runtime","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"calculation bracket currently assumes linear runtime chosen budget parameter always given. Hyperband designed bracket requires approximately runtime sum budget configurations bracket roughly . hold true scaling budget parameter linear anymore, even though sum budgets bracket remains . possible adaption introduce trafo, like shown examples section.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"order support general termination criteria parallelization, evaluate points batch-fashion size batch_size. points one stage bracket evaluated one batch. Parallelization supported via package future (see mlr3::benchmark()'s section parallelization details).","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"mlr3tuning::Tuner -> mlr3tuning::TunerFromOptimizer -> TunerHyperband","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$print() mlr3tuning::TunerFromOptimizer$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"TunerHyperband$new() TunerHyperband$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"","code":"TunerHyperband$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"","code":"TunerHyperband$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"","code":"if(requireNamespace(\"xgboost\")) { library(mlr3learners)  # define hyperparameter and budget parameter search_space = ps(   nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),   eta = p_dbl(lower = 0, upper = 1),   booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\")) )  # \\donttest{ # hyperparameter tuning on the pima indians diabetes data set instance = tune(   method = \"hyperband\",   task = tsk(\"pima\"),   learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   search_space = search_space )  # best performing hyperparameter configuration instance$result # } } #> Loading required namespace: xgboost #>    nrounds       eta booster learner_param_vals  x_domain classif.ce #> 1:       8 0.3670273    dart          <list[6]> <list[3]>  0.2330729"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"TunerSuccessiveHalving class implements successive halving algorithm. algorithm samples n configurations evaluates smallest budget (lower bound budget parameter). every stage budget increased factor eta best 1/eta configurations promoted next stage. optimization terminates maximum budget reached (upper bound budget parameter) identify budget, user specify explicitly parameter objective function influences budget tagging single parameter search_space (paradox::ParamSet) \"budget\".","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Jamieson K, Talwalkar (2016). “Non-stochastic Best Arm Identification Hyperparameter Optimization.” Gretton , Robert CC (eds.), Proceedings 19th International Conference Artificial Intelligence Statistics, volume 51 series Proceedings Machine Learning Research, 240-248. http://proceedings.mlr.press/v51/jamieson16.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"n integer(1) Number configurations first stage. eta numeric(1) every stage, configuration budget increased factor eta best 1/eta configurations used next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn initialization bracket. default uniform sampling.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::ArchiveTuning holds following additional column specific successive halving algorithm: stage (integer(1)) Stage index. Starts counting 0.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::Tuner -> mlr3tuning::TunerFromOptimizer -> TunerSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$print() mlr3tuning::TunerFromOptimizer$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"TunerSuccessiveHalving$new() TunerSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"TunerSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"TunerSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"if(requireNamespace(\"xgboost\")) { library(mlr3learners)  # define hyperparameter and budget parameter search_space = ps(   nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),   eta = p_dbl(lower = 0, upper = 1),   booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\")) )  # \\donttest{ # hyperparameter tuning on the pima indians diabetes data set instance = tune(   method = \"successive_halving\",   task = tsk(\"pima\"),   learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   search_space = search_space )  # best performing hyperparameter configuration instance$result # } } #>    nrounds       eta booster learner_param_vals  x_domain classif.ce #> 1:       4 0.4096098    dart          <list[6]> <list[3]>  0.2460938"},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-030","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.3.0","title":"mlr3hyperband 0.3.0","text":"CRAN release: 2022-01-23 Implements parallel evaluation stages. Number repetitions can set repeats parameter. Fixed maximization bug.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-020","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.2.0","title":"mlr3hyperband 0.2.0","text":"CRAN release: 2021-09-13 Adds OptimizerHyperband. Adds OptimizerSuccessiveHalving.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-012","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.2","title":"mlr3hyperband 0.1.2","text":"CRAN release: 2021-01-29 Internal changes .","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-011","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.1","title":"mlr3hyperband 0.1.1","text":"CRAN release: 2020-12-07 Fixed dependency emoa.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-010","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.0","title":"mlr3hyperband 0.1.0","text":"CRAN release: 2020-10-26 Initial CRAN release.","code":""}]
