[{"path":"https://mlr3hyperband.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Becker. Author, maintainer. Sebastian Gruber. Author. Jakob Richter. Author. Julia Moosbauer. Author. Bernd Bischl. Author.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker M, Gruber S, Richter J, Moosbauer J, Bischl B (2022). mlr3hyperband: Hyperband 'mlr3'. https://mlr3hyperband.mlr-org.com, https://github.com/mlr-org/mlr3hyperband.","code":"@Manual{,   title = {mlr3hyperband: Hyperband for 'mlr3'},   author = {Marc Becker and Sebastian Gruber and Jakob Richter and Julia Moosbauer and Bernd Bischl},   year = {2022},   note = {https://mlr3hyperband.mlr-org.com, https://github.com/mlr-org/mlr3hyperband}, }"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"mlr3hyperband","dir":"","previous_headings":"","what":"Hyperband for mlr3","title":"Hyperband for mlr3","text":"Package website: release | dev mlr3hyperband extends mlr3tuning package multifidelity optimization methods based successive halving algorithm. currently provides following optimizers bbotk tuner mlr3tuning: Successive Halving (OptimizerSuccessiveHalving & TunerSuccessiveHalving) Hyperband (OptimizerSuccessiveHalving & TunerSuccessiveHalving)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Hyperband for mlr3","text":"mlr3book chapter hyperband hyperparameter tuning. original publications introducing successive halving hyperband. Ask questions Stackoverflow (tag #mlr3)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Hyperband for mlr3","text":"Install last release CRAN: Install development version GitHub:","code":"install.packages(\"mlr3hyperband\") remotes::install_github(\"mlr-org/mlr3hyperband\")"},{"path":[]},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"basic","dir":"","previous_headings":"Examples","what":"Basic","title":"Hyperband for mlr3","text":"","code":"library(mlr3hyperband) library(mlr3learners)  # load learner, define search space and tag budget hyperparameter learner = lrn(\"classif.xgboost\",   nrounds           = to_tune(p_int(27, 243, tags = \"budget\")),   eta               = to_tune(1e-4, 1, logscale = TRUE),   max_depth         = to_tune(1, 20),   colsample_bytree  = to_tune(1e-1, 1),   colsample_bylevel = to_tune(1e-1, 1),   lambda            = to_tune(1e-3, 1e3, logscale = TRUE),   alpha             = to_tune(1e-3, 1e3, logscale = TRUE),   subsample         = to_tune(1e-1, 1) )  # set parallel backend future::plan(\"multisession\")  # hyperparameter tuning on the pima indians diabetes data set instance = tune(   method = \"hyperband\",   task = tsk(\"pima\"),   learner = learner,   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   eta = 3 )"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"subsample","dir":"","previous_headings":"Examples","what":"Subsample","title":"Hyperband for mlr3","text":"","code":"library(mlr3hyperband) library(mlr3learners) library(mlr3pipelines)  # load learner and define search space learner = lrn(\"classif.rpart\",   minsplit  = to_tune(2, 128, logscale = TRUE),   minbucket = to_tune(1, 64, logscale = TRUE),   cp        = to_tune(1e-04, 1e-1, logscale = TRUE) )  # create graph learner with subsampling graph_learner = as_learner(po(\"subsample\") %>>% learner)  # increase subsample rate from ~ 3.4% to 100% graph_learner$param_set$values$subsample.frac = to_tune(p_dbl(3^-3, 1, tags = \"budget\"))  # set parallel backend future::plan(\"multisession\")  # hyperparameter tuning on the spam data set instance = tune(   method = \"hyperband\",   task = tsk(\"spam\"),   learner = graph_learner,   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   eta = 3 )"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"quick-general-purpose-optimization","dir":"","previous_headings":"Examples","what":"Quick general-purpose optimization","title":"Hyperband for mlr3","text":"","code":"library(bbotk) library(mlr3hyperband)  # define hyperparameter and budget parameter search_space = domain = ps(   x1        = p_dbl(-5, 10),   x2        = p_dbl(0, 15),   fidelity  = p_dbl(1e-2, 1, tags = \"budget\") )  # modified branin function objective = ObjectiveRFun$new(   fun = branin,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # optimize branin function with hyperband result = bb_optimize(objective, method = \"hyperband\", search_space = search_space,   term_evals = NULL, eta = 2)  # optimized parameters result$par ##           x1       x2 fidelity ## 1: -3.323411 11.43229   0.0625 # optimal outcome result$value ##         y  ## 0.6178947"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Budget — hyperband_budget","title":"Hyperband Budget — hyperband_budget","text":"Calculates total budget used hyperband.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Budget — hyperband_budget","text":"","code":"hyperband_budget(r_min, r_max, eta, integer_budget = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Budget — hyperband_budget","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. integer_budget (logical(1)) Determines budget integer.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Budget — hyperband_budget","text":"integer(1)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Configs — hyperband_n_configs","title":"Hyperband Configs — hyperband_n_configs","text":"Calculates many different configurations sampled.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Configs — hyperband_n_configs","text":"","code":"hyperband_n_configs(r_min, r_max, eta)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Configs — hyperband_n_configs","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Configs — hyperband_n_configs","text":"integer(1)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Schedule — hyperband_schedule","title":"Hyperband Schedule — hyperband_schedule","text":"Returns hyperband schedule.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Schedule — hyperband_schedule","text":"","code":"hyperband_schedule(r_min, r_max, eta, integer_budget = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Schedule — hyperband_schedule","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. integer_budget (logical(1)) Determines budget integer.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Schedule — hyperband_schedule","text":"data.table::data.table()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr3hyperband-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","title":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","text":"Implements hyperband method hyperparameter tuning. Various termination criteria can set combined. class 'AutoTuner' provides convenient way perform nested resampling combination 'mlr3'. hyperband algorithm proposed Lisha Li, Kevin Jamieson, Giulia DeSalvo, Afshin Rostamizadeh Ameet Talwalkar (2018) arXiv:1603.06560.","code":""},{"path":[]},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr3hyperband-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","text":"Maintainer: Marc Becker marcbecker@posteo.de (ORCID) Authors: Sebastian Gruber gruber_sebastian@t-online.de (ORCID) Jakob Richter jakob1richter@gmail.com (ORCID) Julia Moosbauer ju.moosbauer@googlemail.com (ORCID) Bernd Bischl bernd_bischl@gmx.net (ORCID)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"OptimizerHyperband class implements hyperband optimization (HB). HB repeatedly calls SHA (OptimizerSuccessiveHalving) different numbers starting points. larger number starting points corresponds smaller budget allocated base stage. run SHA within HB called bracket. HB considers s_max + 1 brackets s_max = floor(log(r_max / r_min, eta). explorative bracket s = s_max constructs s_max + 1 stages allocates minimum budget (r_min) base stage. minimum budget increased bracket factor eta number starting points computed bracket approximately spends budget. Use hyperband_schedule() get preview bracket layout. s bracket number, stage number, n_i number configurations r_i budget allocated single configuration. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage explorative bracket, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"Li L, Jamieson K, DeSalvo G, Rostamizadeh , Talwalkar (2018). “Hyperband: Novel Bandit-Based Approach Hyperparameter Optimization.” Journal Machine Learning Research, 18(185), 1-52. https://jmlr.org/papers/v18/16-558.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"hyperband\") opt(\"hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta points promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn base stage bracket. default uniform sampling. repetitions integer(1) 1 (default), optimization stopped brackets evaluated. Otherwise, optimization stopped repetitions runs hyperband. bbotk::Terminator might stop optimization repetitions executed.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"bbotk::Archive holds following additional columns specific hyperband algorithm: bracket (integer(1)) bracket index. Counts 0. stage (integer(1)) stages bracket. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"bbotk::Optimizer -> OptimizerHyperband","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"OptimizerHyperband$new() OptimizerHyperband$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"","code":"OptimizerHyperband$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"","code":"OptimizerHyperband$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"","code":"library(bbotk) library(data.table)  # set search space search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # Branin function with fidelity, see `bbotk::branin()` fun = function(xs) branin_wu(xs[[\"x1\"]], xs[[\"x2\"]], xs[[\"fidelity\"]])  # create objective objective = ObjectiveRFun$new(   fun = fun,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # initialize instance and optimizer instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 50) )  optimizer = opt(\"hyperband\")  # optimize branin function optimizer$optimize(instance) #>           x1       x2 fidelity  x_domain         y #> 1: -3.010655 11.24379 0.015625 <list[3]> 0.5101816  # best scoring evaluation instance$result #>           x1       x2 fidelity  x_domain         y #> 1: -3.010655 11.24379 0.015625 <list[3]> 0.5101816  # all evaluations as.data.table(instance$archive) #>              x1         x2 fidelity stage bracket repetition           y #>  1:  3.36503742 10.2203114 0.015625     0       6          1  85.7883683 #>  2:  2.78119829  9.7630461 0.015625     0       6          1  64.2431768 #>  3:  0.75662016 12.6813741 0.015625     0       6          1  78.8872372 #>  4:  4.63660766  9.5020445 0.015625     0       6          1 113.7302559 #>  5: -3.45133738 14.5918684 0.015625     0       6          1   8.3221832 #>  6:  6.37216394 10.1295596 0.015625     0       6          1 189.1550332 #>  7: -1.58958828 11.9240154 0.015625     0       6          1  20.8181821 #>  8:  7.25648321  4.4211717 0.015625     0       6          1  85.1443281 #>  9:  1.91266108 12.1922789 0.015625     0       6          1  90.0263614 #> 10: -1.38658654  9.5839720 0.015625     0       6          1  13.4960358 #> 11: -3.34485831  4.1620131 0.015625     0       6          1  56.9280122 #> 12:  6.82908494  0.6979208 0.015625     0       6          1  35.2867246 #> 13: -2.70584835 13.2198089 0.015625     0       6          1   8.5215638 #> 14:  8.31629496  6.8031030 0.015625     0       6          1 147.6228028 #> 15:  3.83527584  5.7111449 0.015625     0       6          1  31.3777508 #> 16: -0.37990226  8.0191927 0.015625     0       6          1  20.9059343 #> 17:  3.51928792  0.6984953 0.015625     0       6          1   1.0812657 #> 18:  0.06393774  3.3444965 0.015625     0       6          1  26.1047398 #> 19:  2.57334582  5.2300881 0.015625     0       6          1  11.6543158 #> 20:  2.91254894 11.0722358 0.015625     0       6          1  89.8921288 #> 21:  2.40211761 12.5168266 0.015625     0       6          1 106.1821511 #> 22:  9.52049944  4.5089125 0.015625     0       6          1 118.6933727 #> 23:  3.85510869  9.6823162 0.015625     0       6          1  90.3676435 #> 24: -1.84995370  7.8283430 0.015625     0       6          1   8.8454500 #> 25: -4.12978337 13.5672926 0.015625     0       6          1   4.9379385 #> 26:  5.90130543 13.9516995 0.015625     0       6          1 283.7255729 #> 27: -2.62074433 12.9202989 0.015625     0       6          1   8.1129780 #> 28:  4.59717468 10.3372569 0.015625     0       6          1 129.9859190 #> 29: -2.89477384  0.5787086 0.015625     0       6          1 106.4931128 #> 30: -0.14819331  4.6861399 0.015625     0       6          1  21.9005845 #> 31: -3.23977534 11.9409980 0.015625     0       6          1   0.6575852 #> 32:  6.73707951  9.2023321 0.015625     0       6          1 175.6100778 #> 33:  8.98107277  5.9032478 0.015625     0       6          1 138.6163731 #> 34:  6.90246270  4.1685406 0.015625     0       6          1  76.9434078 #> 35:  9.93869528 14.5807992 0.015625     0       6          1 457.9564597 #> 36:  3.78350973  4.1884080 0.015625     0       6          1  16.5214069 #> 37:  0.43240912  5.4521879 0.015625     0       6          1  18.7364506 #> 38:  8.67559354  4.0276064 0.015625     0       6          1  93.6191135 #> 39:  3.41751152  9.1210391 0.015625     0       6          1  68.0186570 #> 40: -3.06801870  6.6915925 0.015625     0       6          1  20.5007561 #> 41:  2.88610559  4.0307479 0.015625     0       6          1   6.3170743 #> 42:  4.52387410  4.8892706 0.015625     0       6          1  38.0120397 #> 43: -4.54177518  9.2818750 0.015625     0       6          1  29.3536449 #> 44:  3.47597396  8.4653055 0.015625     0       6          1  59.0854735 #> 45:  3.53277681  0.2288282 0.015625     0       6          1   1.4066141 #> 46: -4.60307855  2.1806832 0.015625     0       6          1 148.1174792 #> 47:  1.86524983  9.2893787 0.015625     0       6          1  45.0486263 #> 48:  1.14938670  8.2018734 0.015625     0       6          1  29.8522827 #> 49:  9.15976548  9.3095122 0.015625     0       6          1 235.0685080 #> 50: -3.01065543 11.2437923 0.015625     0       6          1   0.5101816 #> 51: -3.03504280 14.0602192 0.015625     0       6          1   9.1346339 #> 52: -4.12934878  6.6082030 0.015625     0       6          1  46.8094182 #> 53:  8.50074445  1.6057775 0.015625     0       6          1  52.0070371 #> 54:  9.75081422  1.1121492 0.015625     0       6          1  60.3120063 #> 55: -4.27046338 11.9909546 0.015625     0       6          1   7.7604850 #> 56:  7.95434417 13.8459109 0.015625     0       6          1 353.5200871 #> 57:  7.33848262 10.1354886 0.015625     0       6          1 215.2169915 #> 58:  9.09373020  0.1521360 0.015625     0       6          1  37.9173394 #> 59: -1.34796784  5.0376767 0.015625     0       6          1  22.1300016 #> 60:  1.03087054  7.1922346 0.015625     0       6          1  22.7775323 #> 61: -4.13360077 11.8335307 0.015625     0       6          1   6.3621331 #> 62:  6.92353311 10.3409986 0.015625     0       6          1 210.5284886 #> 63:  2.66616527  9.3258138 0.015625     0       6          1  55.4938801 #> 64:  1.63300602  9.1090358 0.015625     0       6          1  41.0555048 #>              x1         x2 fidelity stage bracket repetition           y #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity #>  1: 2022-11-27 04:12:12        1  3.36503742  10.2203114          0.015625 #>  2: 2022-11-27 04:12:12        1  2.78119829   9.7630461          0.015625 #>  3: 2022-11-27 04:12:12        1  0.75662016  12.6813741          0.015625 #>  4: 2022-11-27 04:12:12        1  4.63660766   9.5020445          0.015625 #>  5: 2022-11-27 04:12:12        1 -3.45133738  14.5918684          0.015625 #>  6: 2022-11-27 04:12:12        1  6.37216394  10.1295596          0.015625 #>  7: 2022-11-27 04:12:12        1 -1.58958828  11.9240154          0.015625 #>  8: 2022-11-27 04:12:12        1  7.25648321   4.4211717          0.015625 #>  9: 2022-11-27 04:12:12        1  1.91266108  12.1922789          0.015625 #> 10: 2022-11-27 04:12:12        1 -1.38658654   9.5839720          0.015625 #> 11: 2022-11-27 04:12:12        1 -3.34485831   4.1620131          0.015625 #> 12: 2022-11-27 04:12:12        1  6.82908494   0.6979208          0.015625 #> 13: 2022-11-27 04:12:12        1 -2.70584835  13.2198089          0.015625 #> 14: 2022-11-27 04:12:12        1  8.31629496   6.8031030          0.015625 #> 15: 2022-11-27 04:12:12        1  3.83527584   5.7111449          0.015625 #> 16: 2022-11-27 04:12:12        1 -0.37990226   8.0191927          0.015625 #> 17: 2022-11-27 04:12:12        1  3.51928792   0.6984953          0.015625 #> 18: 2022-11-27 04:12:12        1  0.06393774   3.3444965          0.015625 #> 19: 2022-11-27 04:12:12        1  2.57334582   5.2300881          0.015625 #> 20: 2022-11-27 04:12:12        1  2.91254894  11.0722358          0.015625 #> 21: 2022-11-27 04:12:12        1  2.40211761  12.5168266          0.015625 #> 22: 2022-11-27 04:12:12        1  9.52049944   4.5089125          0.015625 #> 23: 2022-11-27 04:12:12        1  3.85510869   9.6823162          0.015625 #> 24: 2022-11-27 04:12:12        1 -1.84995370   7.8283430          0.015625 #> 25: 2022-11-27 04:12:12        1 -4.12978337  13.5672926          0.015625 #> 26: 2022-11-27 04:12:12        1  5.90130543  13.9516995          0.015625 #> 27: 2022-11-27 04:12:12        1 -2.62074433  12.9202989          0.015625 #> 28: 2022-11-27 04:12:12        1  4.59717468  10.3372569          0.015625 #> 29: 2022-11-27 04:12:12        1 -2.89477384   0.5787086          0.015625 #> 30: 2022-11-27 04:12:12        1 -0.14819331   4.6861399          0.015625 #> 31: 2022-11-27 04:12:12        1 -3.23977534  11.9409980          0.015625 #> 32: 2022-11-27 04:12:12        1  6.73707951   9.2023321          0.015625 #> 33: 2022-11-27 04:12:12        1  8.98107277   5.9032478          0.015625 #> 34: 2022-11-27 04:12:12        1  6.90246270   4.1685406          0.015625 #> 35: 2022-11-27 04:12:12        1  9.93869528  14.5807992          0.015625 #> 36: 2022-11-27 04:12:12        1  3.78350973   4.1884080          0.015625 #> 37: 2022-11-27 04:12:12        1  0.43240912   5.4521879          0.015625 #> 38: 2022-11-27 04:12:12        1  8.67559354   4.0276064          0.015625 #> 39: 2022-11-27 04:12:12        1  3.41751152   9.1210391          0.015625 #> 40: 2022-11-27 04:12:12        1 -3.06801870   6.6915925          0.015625 #> 41: 2022-11-27 04:12:12        1  2.88610559   4.0307479          0.015625 #> 42: 2022-11-27 04:12:12        1  4.52387410   4.8892706          0.015625 #> 43: 2022-11-27 04:12:12        1 -4.54177518   9.2818750          0.015625 #> 44: 2022-11-27 04:12:12        1  3.47597396   8.4653055          0.015625 #> 45: 2022-11-27 04:12:12        1  3.53277681   0.2288282          0.015625 #> 46: 2022-11-27 04:12:12        1 -4.60307855   2.1806832          0.015625 #> 47: 2022-11-27 04:12:12        1  1.86524983   9.2893787          0.015625 #> 48: 2022-11-27 04:12:12        1  1.14938670   8.2018734          0.015625 #> 49: 2022-11-27 04:12:12        1  9.15976548   9.3095122          0.015625 #> 50: 2022-11-27 04:12:12        1 -3.01065543  11.2437923          0.015625 #> 51: 2022-11-27 04:12:12        1 -3.03504280  14.0602192          0.015625 #> 52: 2022-11-27 04:12:12        1 -4.12934878   6.6082030          0.015625 #> 53: 2022-11-27 04:12:12        1  8.50074445   1.6057775          0.015625 #> 54: 2022-11-27 04:12:12        1  9.75081422   1.1121492          0.015625 #> 55: 2022-11-27 04:12:12        1 -4.27046338  11.9909546          0.015625 #> 56: 2022-11-27 04:12:12        1  7.95434417  13.8459109          0.015625 #> 57: 2022-11-27 04:12:12        1  7.33848262  10.1354886          0.015625 #> 58: 2022-11-27 04:12:12        1  9.09373020   0.1521360          0.015625 #> 59: 2022-11-27 04:12:12        1 -1.34796784   5.0376767          0.015625 #> 60: 2022-11-27 04:12:12        1  1.03087054   7.1922346          0.015625 #> 61: 2022-11-27 04:12:12        1 -4.13360077  11.8335307          0.015625 #> 62: 2022-11-27 04:12:12        1  6.92353311  10.3409986          0.015625 #> 63: 2022-11-27 04:12:12        1  2.66616527   9.3258138          0.015625 #> 64: 2022-11-27 04:12:12        1  1.63300602   9.1090358          0.015625 #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"OptimizerSuccessiveHalving class implements successive halving algorithm (SHA). SHA randomly samples n candidate points allocates minimum budget (r_min) candidates. candidates raced stages single best candidate repeatedly increasing budget factor eta promoting best 1 / eta  fraction next stage. means promising points allocated higher budget overall lower performing ones discarded early . #' budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage, set lower bound budget parameter. upper bound  defines maximum budget (r_max) allocated candidates last stage. number stages computed candidate base stage allocated minimum budget candidates last stage evaluated maximum budget. following table stage layout eta = 2, r_min = 1 r_max = 8. stage number, n_i number configurations r_i budget allocated single configuration.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Jamieson K, Talwalkar (2016). “Non-stochastic Best Arm Identification Hyperparameter Optimization.” Gretton , Robert CC (eds.), Proceedings 19th International Conference Artificial Intelligence Statistics, volume 51 series Proceedings Machine Learning Research, 240-248. http://proceedings.mlr.press/v51/jamieson16.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"n integer(1) Number points base stage. eta numeric(1) every stage, budget increased factor eta best 1 / eta points promoted next stage. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling. repetitions integer(1) 1 (default), optimization stopped stages evaluated. Otherwise, optimization stopped repetitions runs SHA. bbotk::Terminator might stop optimization repetitions executed. adjust_minimum_budget logical(1) TRUE, minimum budget increased last stage uses maximum budget defined search space.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Archive holds following additional columns specific successive halving algorithm: stage (integer(1)) Stage index. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Optimizer -> OptimizerSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"OptimizerSuccessiveHalving$new() OptimizerSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"OptimizerSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"OptimizerSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"library(bbotk) library(data.table)  # set search space search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # Branin function with fidelity, see `bbotk::branin()` fun = function(xs) branin_wu(xs[[\"x1\"]], xs[[\"x2\"]], xs[[\"fidelity\"]])  # create objective objective = ObjectiveRFun$new(   fun = fun,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # initialize instance and optimizer instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 50) )  optimizer = opt(\"successive_halving\")  # optimize branin function optimizer$optimize(instance) #>          x1       x2 fidelity  x_domain        y #> 1: 3.276694 3.243036     0.16 <list[3]> 4.377808  # best scoring evaluation instance$result #>          x1       x2 fidelity  x_domain        y #> 1: 3.276694 3.243036     0.16 <list[3]> 4.377808  # all evaluations as.data.table(instance$archive) #>             x1         x2 fidelity stage repetition          y #>  1: -4.1963754  2.0935972     0.01     0          1 128.842685 #>  2:  2.8602470  7.9634025     0.01     0          1  40.071854 #>  3:  3.2766936  3.2430363     0.01     0          1   5.039227 #>  4:  0.7053148 13.7089772     0.01     0          1  95.041876 #>  5: -2.1369687  6.5174797     0.01     0          1  13.978552 #>  6:  5.0668369 13.9927153     0.01     0          1 246.869547 #>  7:  5.0872364 12.9469185     0.01     0          1 216.929749 #>  8:  0.6031259  6.1665794     0.01     0          1  19.152328 #>  9:  6.4611426  0.6489687     0.01     0          1  32.934810 #> 10:  2.1464881  2.3845395     0.01     0          1   4.886905 #> 11: -0.5956077 10.6528446     0.01     0          1  31.595798 #> 12:  3.9831927  3.4003417     0.01     0          1  14.235784 #> 13: -1.0188277  4.8055740     0.01     0          1  23.141968 #> 14:  9.4492721 11.4710687     0.01     0          1 317.771980 #> 15:  9.1092981  8.5958677     0.01     0          1 213.712914 #> 16:  7.0742806  8.8910895     0.01     0          1 176.509393 #> 17:  2.1464881  2.3845395     0.02     1          1   4.890044 #> 18:  3.2766936  3.2430363     0.02     1          1   4.993518 #> 19: -2.1369687  6.5174797     0.02     1          1  14.006169 #> 20:  3.9831927  3.4003417     0.02     1          1  14.132563 #> 21:  0.6031259  6.1665794     0.02     1          1  19.151517 #> 22: -1.0188277  4.8055740     0.02     1          1  23.147880 #> 23: -0.5956077 10.6528446     0.02     1          1  31.593177 #> 24:  6.4611426  0.6489687     0.02     1          1  32.629959 #> 25:  2.1464881  2.3845395     0.04     2          1   4.896448 #> 26:  3.2766936  3.2430363     0.04     2          1   4.902793 #> 27: -2.1369687  6.5174797     0.04     2          1  14.061527 #> 28:  3.9831927  3.4003417     0.04     2          1  13.927630 #> 29:  2.1464881  2.3845395     0.08     3          1   4.909766 #> 30:  3.2766936  3.2430363     0.08     3          1   4.724109 #> 31:  3.2766936  3.2430363     0.16     4          1   4.377808 #>             x1         x2 fidelity stage repetition          y #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity #>  1: 2022-11-27 04:12:14        1  -4.1963754   2.0935972              0.01 #>  2: 2022-11-27 04:12:14        1   2.8602470   7.9634025              0.01 #>  3: 2022-11-27 04:12:14        1   3.2766936   3.2430363              0.01 #>  4: 2022-11-27 04:12:14        1   0.7053148  13.7089772              0.01 #>  5: 2022-11-27 04:12:14        1  -2.1369687   6.5174797              0.01 #>  6: 2022-11-27 04:12:14        1   5.0668369  13.9927153              0.01 #>  7: 2022-11-27 04:12:14        1   5.0872364  12.9469185              0.01 #>  8: 2022-11-27 04:12:14        1   0.6031259   6.1665794              0.01 #>  9: 2022-11-27 04:12:14        1   6.4611426   0.6489687              0.01 #> 10: 2022-11-27 04:12:14        1   2.1464881   2.3845395              0.01 #> 11: 2022-11-27 04:12:14        1  -0.5956077  10.6528446              0.01 #> 12: 2022-11-27 04:12:14        1   3.9831927   3.4003417              0.01 #> 13: 2022-11-27 04:12:14        1  -1.0188277   4.8055740              0.01 #> 14: 2022-11-27 04:12:14        1   9.4492721  11.4710687              0.01 #> 15: 2022-11-27 04:12:14        1   9.1092981   8.5958677              0.01 #> 16: 2022-11-27 04:12:14        1   7.0742806   8.8910895              0.01 #> 17: 2022-11-27 04:12:14        2   2.1464881   2.3845395              0.02 #> 18: 2022-11-27 04:12:14        2   3.2766936   3.2430363              0.02 #> 19: 2022-11-27 04:12:14        2  -2.1369687   6.5174797              0.02 #> 20: 2022-11-27 04:12:14        2   3.9831927   3.4003417              0.02 #> 21: 2022-11-27 04:12:14        2   0.6031259   6.1665794              0.02 #> 22: 2022-11-27 04:12:14        2  -1.0188277   4.8055740              0.02 #> 23: 2022-11-27 04:12:14        2  -0.5956077  10.6528446              0.02 #> 24: 2022-11-27 04:12:14        2   6.4611426   0.6489687              0.02 #> 25: 2022-11-27 04:12:14        3   2.1464881   2.3845395              0.04 #> 26: 2022-11-27 04:12:14        3   3.2766936   3.2430363              0.04 #> 27: 2022-11-27 04:12:14        3  -2.1369687   6.5174797              0.04 #> 28: 2022-11-27 04:12:14        3   3.9831927   3.4003417              0.04 #> 29: 2022-11-27 04:12:14        4   2.1464881   2.3845395              0.08 #> 30: 2022-11-27 04:12:14        4   3.2766936   3.2430363              0.08 #> 31: 2022-11-27 04:12:14        5   3.2766936   3.2430363              0.16 #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"TunerHyperband class implements hyperband tuning (HB). HB repeatedly calls SHA (TunerSuccessiveHalving) different numbers starting configurations. larger number starting configurations corresponds smaller budget allocated base stage. run SHA within HB called bracket. HB considers s_max + 1 brackets s_max = floor(log(r_max / r_min, eta). explorative bracket s = s_max constructs s_max + 1 stages allocates minimum budget (r_min) base stage. minimum budget increased bracket factor eta number starting configurations computed bracket approximately spends budget. Use hyperband_schedule() get preview bracket layout. s bracket number, stage number, n_i number configurations r_i budget allocated single configuration. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage explorative bracket, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"Li L, Jamieson K, DeSalvo G, Rostamizadeh , Talwalkar (2018). “Hyperband: Novel Bandit-Based Approach Hyperparameter Optimization.” Journal Machine Learning Research, 18(185), 1-52. https://jmlr.org/papers/v18/16-558.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"subsample-budget","dir":"Reference","previous_headings":"","what":"Subsample Budget","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"learner lacks natural budget parameter, mlr3pipelines::PipeOpSubsample can applied use subsampling rate budget parameter. resulting mlr3pipelines::GraphLearner fitted small proportions mlr3::Task first stage, complete task last stage.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"hyperband\") opt(\"hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta configurations promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn base stage bracket. default uniform sampling. repetitions integer(1) 1 (default), optimization stopped brackets evaluated. Otherwise, optimization stopped repetitions runs hyperband. bbotk::Terminator might stop optimization repetitions executed.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"mlr3tuning::ArchiveTuning holds following additional columns specific hyperband algorithm: bracket (integer(1)) bracket index. Counts 0. stage (integer(1)) stages bracket. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"hyperband implementation evaluates hyperparameter configurations equal budget across brackets one batch. example, configurations stage 1 bracket 3 stage 0 bracket 2 one batch. select parallel backend, use plan() function future package.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"mlr3tuning::Tuner -> mlr3tuning::TunerFromOptimizer -> TunerHyperband","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$help() mlr3tuning::Tuner$print() mlr3tuning::TunerFromOptimizer$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"TunerHyperband$new() TunerHyperband$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"","code":"TunerHyperband$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"","code":"TunerHyperband$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"","code":"if(requireNamespace(\"xgboost\")) {   library(mlr3learners)    # define hyperparameter and budget parameter   search_space = ps(     nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),     eta = p_dbl(lower = 0, upper = 1),     booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\"))   )    # \\donttest{   # hyperparameter tuning on the pima indians diabetes data set   instance = tune(     method = \"hyperband\",     task = tsk(\"pima\"),     learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),     resampling = rsmp(\"cv\", folds = 3),     measures = msr(\"classif.ce\"),     search_space = search_space,     term_evals = 100   )    # best performing hyperparameter configuration   instance$result   # } } #> Loading required namespace: xgboost #>    nrounds        eta booster learner_param_vals  x_domain classif.ce #> 1:       8 0.06494791    dart          <list[7]> <list[3]>  0.2460938"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"TunerSuccessiveHalving class implements successive halving algorithm (SHA). SHA randomly samples n candidate hyperparameter configurations allocates minimum budget (r_min) candidates. candidates raced stages single best candidate repeatedly increasing budget factor eta promoting best 1 / eta  fraction next stage. means promising hyperparameter configurations allocated higher budget overall lower performing ones discarded early . budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage, set lower bound budget parameter. upper bound  defines maximum budget (r_max) allocated candidates last stage. number stages computed candidate base stage allocated minimum budget candidates last stage evaluated maximum budget. following table stage layout eta = 2, r_min = 1 r_max = 8. stage number, n_i number configurations r_i budget allocated single configuration.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Jamieson K, Talwalkar (2016). “Non-stochastic Best Arm Identification Hyperparameter Optimization.” Gretton , Robert CC (eds.), Proceedings 19th International Conference Artificial Intelligence Statistics, volume 51 series Proceedings Machine Learning Research, 240-248. http://proceedings.mlr.press/v51/jamieson16.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"subsample-budget","dir":"Reference","previous_headings":"","what":"Subsample Budget","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"learner lacks natural budget parameter, mlr3pipelines::PipeOpSubsample can applied use subsampling rate budget parameter. resulting mlr3pipelines::GraphLearner fitted small proportions mlr3::Task first stage, complete task last stage.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"n integer(1) Number candidates base stage. eta numeric(1) every stage, budget increased factor eta best 1 / eta candidates promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling. repeats logical(1) FALSE (default), SHA terminates stages evaluated. Otherwise, SHA starts last stage evaluated. adjust_minimum_budget logical(1) TRUE, minimum budget increased last stage uses maximum budget defined search space.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::ArchiveTuning holds following additional columns specific successive halving algorithm: stage (integer(1)) Stage index. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"hyperparameter configurations one stage evaluated parallel future package. select parallel backend, use plan() function future package.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::Tuner -> mlr3tuning::TunerFromOptimizer -> TunerSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$help() mlr3tuning::Tuner$print() mlr3tuning::TunerFromOptimizer$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"TunerSuccessiveHalving$new() TunerSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"TunerSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"TunerSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"if(requireNamespace(\"xgboost\")) {   library(mlr3learners)    # define hyperparameter and budget parameter   search_space = ps(     nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),     eta = p_dbl(lower = 0, upper = 1),     booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\"))   )    # \\donttest{   # hyperparameter tuning on the pima indians diabetes data set   instance = tune(     method = \"successive_halving\",     task = tsk(\"pima\"),     learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),     resampling = rsmp(\"cv\", folds = 3),     measures = msr(\"classif.ce\"),     search_space = search_space,     term_evals = 100   )    # best performing hyperparameter configuration   instance$result   # } } #>    nrounds      eta booster learner_param_vals  x_domain classif.ce #> 1:       2 0.519003  gbtree          <list[7]> <list[3]>  0.2395833"},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-0439000","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.4.3.9000","title":"mlr3hyperband 0.4.3.9000","text":"fix: Remove emoa required packages OptimizerSuccessiveHalving.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-043","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.4.3","title":"mlr3hyperband 0.4.3","text":"CRAN release: 2022-11-07 docs: Examples use branin_wu() function now.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-042","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.4.2","title":"mlr3hyperband 0.4.2","text":"CRAN release: 2022-08-25 docs: Re-generate rd files valid html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-041","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.4.1","title":"mlr3hyperband 0.4.1","text":"CRAN release: 2022-05-04 feat: Optimizer Tuner objects field $id now. feat: Optimizer Tuner objects optional field $label now. feat: New $help() method opens manual page Optimizer Tuner objects.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-040","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.4.0","title":"mlr3hyperband 0.4.0","text":"CRAN release: 2022-02-10 feat: New adjust_minimum_budget flag OptimizerSuccessiveHalving. minimum budget adjusted base stage use maximum budget last stage. feat: New repetitions parameter specify exact number repetitions. Replaced repeats parameter.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-030","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.3.0","title":"mlr3hyperband 0.3.0","text":"CRAN release: 2022-01-23 feat: TunerHyperband evaluates configurations budget across brackets parallel now. feat: New repeats parameter repeat runs successive halving hyperband termination. fix: Bug maximization measures minimized.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-020","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.2.0","title":"mlr3hyperband 0.2.0","text":"CRAN release: 2021-09-13 feat: New OptimizerHyperband OptimizerSuccessiveHalving optimizers.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-012","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.2","title":"mlr3hyperband 0.1.2","text":"CRAN release: 2021-01-29 refactor: Make XGBoost conditionally examples.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-011","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.1","title":"mlr3hyperband 0.1.1","text":"CRAN release: 2020-12-07 fix: Dependency emoa.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-010","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.0","title":"mlr3hyperband 0.1.0","text":"CRAN release: 2020-10-26 Initial CRAN release.","code":""}]
