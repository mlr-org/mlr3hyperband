[{"path":"https://mlr3hyperband.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Becker. Author, maintainer. Sebastian Gruber. Author. Jakob Richter. Author. Julia Moosbauer. Author. Bernd Bischl. Author.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker M, Gruber S, Richter J, Moosbauer J, Bischl B (2025). mlr3hyperband: Hyperband 'mlr3'. R package version 0.6.0.9000, https://mlr3hyperband.mlr-org.com.","code":"@Manual{,   title = {mlr3hyperband: Hyperband for 'mlr3'},   author = {Marc Becker and Sebastian Gruber and Jakob Richter and Julia Moosbauer and Bernd Bischl},   year = {2025},   note = {R package version 0.6.0.9000},   url = {https://mlr3hyperband.mlr-org.com}, }"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"mlr3hyperband-","dir":"","previous_headings":"","what":"Hyperband for mlr3","title":"Hyperband for mlr3","text":"Package website: release | dev mlr3hyperband adds optimization algorithms Successive Halving (Jamieson Talwalkar 2016) Hyperband (Li et al. 2018) mlr3 ecosystem. implementation mlr3hyperband features improved scheduling parallelizes evaluation configurations. package includes tuners hyperparameter optimization mlr3tuning optimizers black-box optimization bbotk.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Hyperband for mlr3","text":"several sections hyperparameter optimization mlr3book. gallery features series case studies Hyperband. Tune hyperparameters XGBoost Hyperband Use data subsampling Hyperband optimize support vector machine.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Hyperband for mlr3","text":"Install last release CRAN: Install development version GitHub:","code":"install.packages(\"mlr3hyperband\") remotes::install_github(\"mlr-org/mlr3hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Hyperband for mlr3","text":"optimize hyperparameters XGBoost model Sonar data set. number boosting rounds nrounds fidelity parameter. tag parameter \"budget\" search space. use tune() function run optimization. instance contains best-performing hyperparameter configuration. archive contains evaluated hyperparameter configurations. Hyperband adds \"stage\" \"braket\". fit final model optimized hyperparameters make predictions new data.","code":"library(mlr3hyperband) library(mlr3learners)  learner = lrn(\"classif.xgboost\",   nrounds           = to_tune(p_int(27, 243, tags = \"budget\")),   eta               = to_tune(1e-4, 1, logscale = TRUE),   max_depth         = to_tune(1, 20),   colsample_bytree  = to_tune(1e-1, 1),   colsample_bylevel = to_tune(1e-1, 1),   lambda            = to_tune(1e-3, 1e3, logscale = TRUE),   alpha             = to_tune(1e-3, 1e3, logscale = TRUE),   subsample         = to_tune(1e-1, 1) ) instance = tune(   tnr(\"hyperband\", eta = 3),   task = tsk(\"pima\"),   learner = learner,   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\") ) instance$result ##    nrounds       eta max_depth colsample_bytree colsample_bylevel    lambda     alpha subsample ## 1:      27 -2.102951         3        0.7175178         0.5419011 -5.390012 -4.696385  0.193622 ## 3 variables not shown: [learner_param_vals, x_domain, classif.ce] as.data.table(instance$archive)[, .(stage, bracket, classif.ce, nrounds)] ##     stage bracket classif.ce nrounds ##  1:     0       2  0.3489583      27 ##  2:     0       2  0.2434896      27 ##  3:     0       2  0.2591146      27 ##  4:     0       2  0.3489583      27 ##  5:     0       2  0.5052083      27 ## ---                                  ## 18:     0       0  0.2434896     243 ## 19:     0       0  0.4960938     243 ## 20:     0       0  0.2903646     243 ## 21:     2       2  0.2473958     243 ## 22:     1       1  0.2421875     243 learner$param_set$values = instance$result_learner_param_vals learner$train(tsk(\"sonar\"))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Hyperband for mlr3","text":"Jamieson, Kevin, Ameet Talwalkar. 2016. “Non-Stochastic Best Arm Identification Hyperparameter Optimization.” Proceedings 19th International Conference Artificial Intelligence Statistics, edited Arthur Gretton Christian C. Robert, 51:240–48. Proceedings Machine Learning Research. Cadiz, Spain: PMLR. http://proceedings.mlr.press/v51/jamieson16.html. Li, Lisha, Kevin Jamieson, Giulia DeSalvo, Afshin Rostamizadeh, Ameet Talwalkar. 2018. “Hyperband: Novel Bandit-Based Approach Hyperparameter Optimization.” Journal Machine Learning Research 18 (185): 1–52. https://jmlr.org/papers/v18/16-558.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Budget — hyperband_budget","title":"Hyperband Budget — hyperband_budget","text":"Calculates total budget used hyperband.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Budget — hyperband_budget","text":"","code":"hyperband_budget(r_min, r_max, eta, integer_budget = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Budget — hyperband_budget","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. integer_budget (logical(1)) Determines budget integer.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Budget — hyperband_budget","text":"integer(1)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Configs — hyperband_n_configs","title":"Hyperband Configs — hyperband_n_configs","text":"Calculates many different configurations sampled.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Configs — hyperband_n_configs","text":"","code":"hyperband_n_configs(r_min, r_max, eta)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Configs — hyperband_n_configs","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Configs — hyperband_n_configs","text":"integer(1)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Schedule — hyperband_schedule","title":"Hyperband Schedule — hyperband_schedule","text":"Returns hyperband schedule.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Schedule — hyperband_schedule","text":"","code":"hyperband_schedule(r_min, r_max, eta, integer_budget = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Schedule — hyperband_schedule","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. integer_budget (logical(1)) Determines budget integer.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Schedule — hyperband_schedule","text":"data.table::data.table()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr3hyperband-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","title":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","text":"Successive Halving (Jamieson Talwalkar (2016) doi:10.48550/arXiv.1502.07943 ) Hyperband (Li et al. 2018 doi:10.48550/arXiv.1603.06560 ) optimization algorithm mlr3 ecosystem. implementation mlr3hyperband features improved scheduling parallelizes evaluation configurations. package includes tuners hyperparameter optimization mlr3tuning optimizers black-box optimization bbotk.","code":""},{"path":[]},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr3hyperband-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","text":"Maintainer: Marc Becker marcbecker@posteo.de (ORCID) Authors: Sebastian Gruber gruber_sebastian@t-online.de (ORCID) Jakob Richter jakob1richter@gmail.com (ORCID) Julia Moosbauer ju.moosbauer@googlemail.com (ORCID) Bernd Bischl bernd_bischl@gmx.net (ORCID)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"OptimizerAsyncSuccessiveHalving class implements Asynchronous Successive Halving Algorithm (ASHA). class implements asynchronous version OptimizerBatchSuccessiveHalving.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"Li L, Jamieson K, Rostamizadeh , Gonina E, Ben-tzur J, Hardt M, Recht B, Talwalkar (2020). “System Massively Parallel Hyperparameter Tuning.” Dhillon , Papailiopoulos D, Sze V (eds.), Proceedings Machine Learning Systems, volume 2, 230–246. https://proceedings.mlsys.org/paper_files/paper/2020/hash/a06f20b349c6cf09a6b171c71b88bbfc-Abstract.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"bbotk::Optimizer can instantiated via dictionary bbotk::mlr_optimizers associated sugar function bbotk::opt():","code":"mlr_optimizers$get(\"async_successive_halving\") opt(\"async_successive_halving\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta configurations promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"bbotk::Archive holds following additional columns specific SHA: stage (integer(1)) Stage index. Starts counting 0. asha_id (character(1)) Unique identifier configuration across stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"bbotk::Optimizer -> bbotk::OptimizerAsync -> OptimizerAsyncSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"OptimizerAsyncSuccessiveHalving$new() OptimizerAsyncSuccessiveHalving$optimize() OptimizerAsyncSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"","code":"OptimizerAsyncSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"Performs optimization bbotk::OptimInstanceAsyncSingleCrit bbotk::OptimInstanceAsyncMultiCrit termination. single evaluations written bbotk::ArchiveAsync. result written instance object.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"","code":"OptimizerAsyncSuccessiveHalving$optimize(inst)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"inst (bbotk::OptimInstanceAsyncSingleCrit | bbotk::OptimInstanceAsyncMultiCrit).","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"data.table::data.table()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"","code":"OptimizerAsyncSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_async_successive_halving.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous Hyperparameter Optimization with Successive Halving — mlr_optimizers_async_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"Optimizer using Hyperband (HB) algorithm. HB runs Successive Halving Algorithm (SHA) different numbers stating configurations. algorithm initialized parameters Successive Halving without n. run Successive Halving called bracket starts different budget r_0. smaller starting budget means configurations can tried . explorative bracket allocated minimum budget r_min. next bracket increases starting budget factor eta. bracket, starting budget increases last bracket s = 0 essentially performs random search full budget r_max. number brackets s_max + 1 calculated s_max = log(r_min / r_max)(eta). condition r_0 increases eta bracket, r_min sometimes adjusted slightly order use r_max resources last bracket. number configurations base stages calculated bracket uses approximately amount budget. following table shows full run HB eta = 2, r_min = 1 r_max = 8. s bracket number, stage number, n_i number configurations r_i budget allocated single configuration. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage explorative bracket, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"Li L, Jamieson K, DeSalvo G, Rostamizadeh , Talwalkar (2018). “Hyperband: Novel Bandit-Based Approach Hyperparameter Optimization.” Journal Machine Learning Research, 18(185), 1-52. https://jmlr.org/papers/v18/16-558.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"gallery features collection case studies demos optimization. Tune hyperparameters XGBoost Hyperband. Use data subsampling Hyperband optimize support vector machine.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"bbotk::Optimizer can instantiated via dictionary bbotk::mlr_optimizers associated sugar function bbotk::opt():","code":"mlr_optimizers$get(\"hyperband\") opt(\"hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta points promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn base stage bracket. default uniform sampling. repetitions integer(1) 1 (default), optimization stopped brackets evaluated. Otherwise, optimization stopped repetitions runs HB. bbotk::Terminator might stop optimization repetitions executed.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"bbotk::Archive holds following additional columns specific HB: bracket (integer(1)) bracket index. Counts 0. stage (integer(1)) stages bracket. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"$optimize() supports progress bars via package progressr combined bbotk::Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"bbotk::Optimizer -> bbotk::OptimizerBatch -> OptimizerBatchHyperband","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$print() bbotk::OptimizerBatch$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"OptimizerBatchHyperband$new() OptimizerBatchHyperband$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"","code":"OptimizerBatchHyperband$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"","code":"OptimizerBatchHyperband$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizer Using the Hyperband Algorithm — mlr_optimizers_hyperband","text":"","code":"library(bbotk) library(data.table)  # set search space search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # Branin function with fidelity, see `bbotk::branin()` fun = function(xs) branin_wu(xs[[\"x1\"]], xs[[\"x2\"]], xs[[\"fidelity\"]])  # create objective objective = ObjectiveRFun$new(   fun = fun,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # initialize instance and optimizer instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 50) ) #> OptimInstanceSingleCrit is deprecated. Use OptimInstanceBatchSingleCrit instead.  optimizer = opt(\"hyperband\")  # optimize branin function optimizer$optimize(instance) #>          x1       x2 fidelity  x_domain        y #>       <num>    <num>    <num>    <list>    <num> #> 1: 2.953187 2.235532 0.015625 <list[3]> 1.013389  # best scoring evaluation instance$result #>          x1       x2 fidelity  x_domain        y #>       <num>    <num>    <num>    <list>    <num> #> 1: 2.953187 2.235532 0.015625 <list[3]> 1.013389  # all evaluations as.data.table(instance$archive) #>              x1         x2 fidelity stage bracket repetition          y #>           <num>      <num>    <num> <num>   <int>      <num>      <num> #>  1:  4.01141329 14.2164591 0.015625     0       6          1 202.787861 #>  2: -2.64187338  8.1372061 0.015625     0       6          1   6.779880 #>  3: -4.88900838  8.1690509 0.015625     0       6          1  51.971208 #>  4:  1.99590246  4.1789573 0.015625     0       6          1   7.560334 #>  5:  2.46666083  6.7005370 0.015625     0       6          1  22.210292 #>  6: -0.65349133  5.5726678 0.015625     0       6          1  19.815710 #>  7:  5.99322981  0.4209146 0.015625     0       6          1  27.352543 #>  8:  6.58782267  6.9898079 0.015625     0       6          1 121.984687 #>  9:  8.11900991  5.8504708 0.015625     0       6          1 122.950307 #> 10: -2.37589060  0.3009783 0.015625     0       6          1  96.276269 #> 11: -4.48638001  5.6545639 0.015625     0       6          1  73.532730 #> 12: -0.19421404  8.3986926 0.015625     0       6          1  23.783136 #> 13:  1.03492358 12.8562538 0.015625     0       6          1  86.651345 #> 14: -2.06495248  5.7721457 0.015625     0       6          1  18.735016 #> 15:  1.05307176  7.9187555 0.015625     0       6          1  27.430526 #> 16: -4.04507814  9.0095629 0.015625     0       6          1  19.514032 #> 17:  0.83051970  3.9205704 0.015625     0       6          1  17.083118 #> 18:  9.63321753  4.3507524 0.015625     0       6          1 117.877434 #> 19: -0.65161557  7.2011276 0.015625     0       6          1  17.657487 #> 20:  5.17570641 13.8000832 0.015625     0       6          1 245.751887 #> 21:  6.02979398  6.0108028 0.015625     0       6          1  91.368896 #> 22: -2.06064900  3.1975907 0.015625     0       6          1  44.078574 #> 23:  9.70809512 10.0765022 0.015625     0       6          1 277.324244 #> 24:  6.12282294  0.8792117 0.015625     0       6          1  31.528931 #> 25: -4.22830586 14.9560370 0.015625     0       6          1   8.342752 #> 26:  2.95318695  2.2355320 0.015625     0       6          1   1.013389 #> 27:  5.43735818  7.7783495 0.015625     0       6          1 107.057527 #> 28:  5.32834005 12.6918008 0.015625     0       6          1 220.013816 #> 29: -4.53154512 10.7740459 0.015625     0       6          1  17.694913 #> 30: -1.61656198  3.6197103 0.015625     0       6          1  34.896610 #> 31: -0.48753791  8.2056505 0.015625     0       6          1  20.506586 #> 32:  4.54698422 12.5220272 0.015625     0       6          1 180.634251 #> 33:  2.18536825  0.4193404 0.015625     0       6          1   9.523050 #> 34:  1.48256887  7.0407645 0.015625     0       6          1  21.953386 #> 35:  5.59650757 12.0852005 0.015625     0       6          1 214.246974 #> 36:  9.22864864 12.2107697 0.015625     0       6          1 334.738923 #> 37: -2.29491848  6.0586650 0.015625     0       6          1  17.744430 #> 38: -1.74650185  3.2764651 0.015625     0       6          1  39.647547 #> 39:  5.20244376  6.2754210 0.015625     0       6          1  74.167080 #> 40:  2.48268416 10.0330612 0.015625     0       6          1  63.167824 #> 41:  4.62519023  7.6147542 0.015625     0       6          1  78.356573 #> 42:  4.90426524  9.9053896 0.015625     0       6          1 132.199431 #> 43: -3.55963763  7.6768697 0.015625     0       6          1  20.392237 #> 44:  6.48400246 12.5332866 0.015625     0       6          1 261.529668 #> 45:  6.54512206 10.6317174 0.015625     0       6          1 207.827119 #> 46:  9.86068468 13.1130891 0.015625     0       6          1 394.018374 #> 47:  9.55781354  0.1721931 0.015625     0       6          1  43.715083 #> 48:  0.83774141 13.3237435 0.015625     0       6          1  90.996559 #> 49:  1.91779697 14.9452038 0.015625     0       6          1 147.973171 #> 50: -0.27137371  7.5028725 0.015625     0       6          1  20.392837 #> 51: -2.37986159  5.3845054 0.015625     0       6          1  24.003227 #> 52:  2.97360311 11.6236953 0.015625     0       6          1 102.229329 #> 53:  2.40455524  8.7671288 0.015625     0       6          1  44.059174 #> 54:  6.68962939  9.5096456 0.015625     0       6          1 182.162506 #> 55: -1.93732486 12.8799923 0.015625     0       6          1  20.110380 #> 56:  5.70095918  8.5034151 0.015625     0       6          1 129.902880 #> 57: -4.02175832  3.7949553 0.015625     0       6          1  86.751308 #> 58:  0.31310198 13.7820482 0.015625     0       6          1  87.649828 #> 59:  7.37799132 13.0102531 0.015625     0       6          1 306.091599 #> 60: -0.89272632  3.7280805 0.015625     0       6          1  29.841207 #> 61:  3.55067427  6.0432182 0.015625     0       6          1  29.350783 #> 62:  0.03578621 11.5444526 0.015625     0       6          1  50.971297 #> 63:  3.94394183  1.7922806 0.015625     0       6          1   5.857622 #> 64: -2.12722953  2.9204244 0.015625     0       6          1  48.545318 #>              x1         x2 fidelity stage bracket repetition          y #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity #>                  <POSc>    <int>       <num>       <num>             <num> #>  1: 2025-07-10 07:24:35        1  4.01141329  14.2164591          0.015625 #>  2: 2025-07-10 07:24:35        1 -2.64187338   8.1372061          0.015625 #>  3: 2025-07-10 07:24:35        1 -4.88900838   8.1690509          0.015625 #>  4: 2025-07-10 07:24:35        1  1.99590246   4.1789573          0.015625 #>  5: 2025-07-10 07:24:35        1  2.46666083   6.7005370          0.015625 #>  6: 2025-07-10 07:24:35        1 -0.65349133   5.5726678          0.015625 #>  7: 2025-07-10 07:24:35        1  5.99322981   0.4209146          0.015625 #>  8: 2025-07-10 07:24:35        1  6.58782267   6.9898079          0.015625 #>  9: 2025-07-10 07:24:35        1  8.11900991   5.8504708          0.015625 #> 10: 2025-07-10 07:24:35        1 -2.37589060   0.3009783          0.015625 #> 11: 2025-07-10 07:24:35        1 -4.48638001   5.6545639          0.015625 #> 12: 2025-07-10 07:24:35        1 -0.19421404   8.3986926          0.015625 #> 13: 2025-07-10 07:24:35        1  1.03492358  12.8562538          0.015625 #> 14: 2025-07-10 07:24:35        1 -2.06495248   5.7721457          0.015625 #> 15: 2025-07-10 07:24:35        1  1.05307176   7.9187555          0.015625 #> 16: 2025-07-10 07:24:35        1 -4.04507814   9.0095629          0.015625 #> 17: 2025-07-10 07:24:35        1  0.83051970   3.9205704          0.015625 #> 18: 2025-07-10 07:24:35        1  9.63321753   4.3507524          0.015625 #> 19: 2025-07-10 07:24:35        1 -0.65161557   7.2011276          0.015625 #> 20: 2025-07-10 07:24:35        1  5.17570641  13.8000832          0.015625 #> 21: 2025-07-10 07:24:35        1  6.02979398   6.0108028          0.015625 #> 22: 2025-07-10 07:24:35        1 -2.06064900   3.1975907          0.015625 #> 23: 2025-07-10 07:24:35        1  9.70809512  10.0765022          0.015625 #> 24: 2025-07-10 07:24:35        1  6.12282294   0.8792117          0.015625 #> 25: 2025-07-10 07:24:35        1 -4.22830586  14.9560370          0.015625 #> 26: 2025-07-10 07:24:35        1  2.95318695   2.2355320          0.015625 #> 27: 2025-07-10 07:24:35        1  5.43735818   7.7783495          0.015625 #> 28: 2025-07-10 07:24:35        1  5.32834005  12.6918008          0.015625 #> 29: 2025-07-10 07:24:35        1 -4.53154512  10.7740459          0.015625 #> 30: 2025-07-10 07:24:35        1 -1.61656198   3.6197103          0.015625 #> 31: 2025-07-10 07:24:35        1 -0.48753791   8.2056505          0.015625 #> 32: 2025-07-10 07:24:35        1  4.54698422  12.5220272          0.015625 #> 33: 2025-07-10 07:24:35        1  2.18536825   0.4193404          0.015625 #> 34: 2025-07-10 07:24:35        1  1.48256887   7.0407645          0.015625 #> 35: 2025-07-10 07:24:35        1  5.59650757  12.0852005          0.015625 #> 36: 2025-07-10 07:24:35        1  9.22864864  12.2107697          0.015625 #> 37: 2025-07-10 07:24:35        1 -2.29491848   6.0586650          0.015625 #> 38: 2025-07-10 07:24:35        1 -1.74650185   3.2764651          0.015625 #> 39: 2025-07-10 07:24:35        1  5.20244376   6.2754210          0.015625 #> 40: 2025-07-10 07:24:35        1  2.48268416  10.0330612          0.015625 #> 41: 2025-07-10 07:24:35        1  4.62519023   7.6147542          0.015625 #> 42: 2025-07-10 07:24:35        1  4.90426524   9.9053896          0.015625 #> 43: 2025-07-10 07:24:35        1 -3.55963763   7.6768697          0.015625 #> 44: 2025-07-10 07:24:35        1  6.48400246  12.5332866          0.015625 #> 45: 2025-07-10 07:24:35        1  6.54512206  10.6317174          0.015625 #> 46: 2025-07-10 07:24:35        1  9.86068468  13.1130891          0.015625 #> 47: 2025-07-10 07:24:35        1  9.55781354   0.1721931          0.015625 #> 48: 2025-07-10 07:24:35        1  0.83774141  13.3237435          0.015625 #> 49: 2025-07-10 07:24:35        1  1.91779697  14.9452038          0.015625 #> 50: 2025-07-10 07:24:35        1 -0.27137371   7.5028725          0.015625 #> 51: 2025-07-10 07:24:35        1 -2.37986159   5.3845054          0.015625 #> 52: 2025-07-10 07:24:35        1  2.97360311  11.6236953          0.015625 #> 53: 2025-07-10 07:24:35        1  2.40455524   8.7671288          0.015625 #> 54: 2025-07-10 07:24:35        1  6.68962939   9.5096456          0.015625 #> 55: 2025-07-10 07:24:35        1 -1.93732486  12.8799923          0.015625 #> 56: 2025-07-10 07:24:35        1  5.70095918   8.5034151          0.015625 #> 57: 2025-07-10 07:24:35        1 -4.02175832   3.7949553          0.015625 #> 58: 2025-07-10 07:24:35        1  0.31310198  13.7820482          0.015625 #> 59: 2025-07-10 07:24:35        1  7.37799132  13.0102531          0.015625 #> 60: 2025-07-10 07:24:35        1 -0.89272632   3.7280805          0.015625 #> 61: 2025-07-10 07:24:35        1  3.55067427   6.0432182          0.015625 #> 62: 2025-07-10 07:24:35        1  0.03578621  11.5444526          0.015625 #> 63: 2025-07-10 07:24:35        1  3.94394183   1.7922806          0.015625 #> 64: 2025-07-10 07:24:35        1 -2.12722953   2.9204244          0.015625 #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Optimizer using Successive Halving Algorithm (SHA). SHA initialized number starting configurations n, proportion configurations discarded stage eta, minimum r_min maximum _max budget single evaluation. algorithm starts sampling n random configurations allocating minimum budget r_min . configurations evaluated 1 / eta worst-performing configurations discarded. remaining configurations promoted next stage evaluated larger budget. following table stage layout eta = 2, r_min = 1 r_max = 8. stage number, n_i number configurations r_i budget allocated single configuration. number stages calculated stage consumes approximately budget. sometimes results minimum budget slightly adjusted algorithm.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Jamieson K, Talwalkar (2016). “Non-stochastic Best Arm Identification Hyperparameter Optimization.” Gretton , Robert CC (eds.), Proceedings 19th International Conference Artificial Intelligence Statistics, volume 51 series Proceedings Machine Learning Research, 240-248. http://proceedings.mlr.press/v51/jamieson16.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"gallery features collection case studies demos optimization. Tune hyperparameters XGBoost Hyperband (Hyperband can easily swapped SHA). Use data subsampling Hyperband optimize support vector machine.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Optimizer can instantiated via dictionary bbotk::mlr_optimizers associated sugar function bbotk::opt():","code":"mlr_optimizers$get(\"successive_halving\") opt(\"successive_halving\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"n integer(1) Number configurations base stage. eta numeric(1) every stage, budget increased factor eta best 1 / eta configurations promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling. repetitions integer(1) 1 (default), optimization stopped stages evaluated. Otherwise, optimization stopped repetitions runs SHA. bbotk::Terminator might stop optimization repetitions executed. adjust_minimum_budget logical(1) TRUE, minimum budget increased last stage uses maximum budget defined search space.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Archive holds following additional columns specific SHA: stage (integer(1)) Stage index. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"$optimize() supports progress bars via package progressr combined bbotk::Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Optimizer -> bbotk::OptimizerBatch -> OptimizerBatchSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$print() bbotk::OptimizerBatch$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"OptimizerBatchSuccessiveHalving$new() OptimizerBatchSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"OptimizerBatchSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"OptimizerBatchSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"library(bbotk) library(data.table)  # set search space search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # Branin function with fidelity, see `bbotk::branin()` fun = function(xs) branin_wu(xs[[\"x1\"]], xs[[\"x2\"]], xs[[\"fidelity\"]])  # create objective objective = ObjectiveRFun$new(   fun = fun,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # initialize instance and optimizer instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 50) ) #> OptimInstanceSingleCrit is deprecated. Use OptimInstanceBatchSingleCrit instead.  optimizer = opt(\"successive_halving\")  # optimize branin function optimizer$optimize(instance) #>           x1       x2 fidelity  x_domain        y #>        <num>    <num>    <num>    <list>    <num> #> 1: -3.787326 12.87492     0.16 <list[3]> 2.370823  # best scoring evaluation instance$result #>           x1       x2 fidelity  x_domain        y #>        <num>    <num>    <num>    <list>    <num> #> 1: -3.787326 12.87492     0.16 <list[3]> 2.370823  # all evaluations as.data.table(instance$archive) #>             x1         x2 fidelity stage repetition          y #>          <num>      <num>    <num> <int>      <num>      <num> #>  1: -4.4071897  9.0300579     0.01     0          1  28.004065 #>  2:  9.1716220  9.8549374     0.01     0          1 253.925823 #>  3: -1.3260802  4.9397575     0.01     0          1  22.719578 #>  4:  6.7168385 14.6921133     0.01     0          1 343.451440 #>  5: -0.6764425 10.7277920     0.01     0          1  30.718370 #>  6:  8.1303687 13.0894546     0.01     0          1 332.606891 #>  7: -0.5637486 14.7492562     0.01     0          1  79.619962 #>  8:  9.7528811  3.2784449     0.01     0          1  99.505602 #>  9:  3.8475633  9.9679510     0.01     0          1  95.713095 #> 10:  6.3873757  5.8434606     0.01     0          1  96.599814 #> 11:  7.5411296  0.6909546     0.01     0          1  37.720661 #> 12:  6.4422920  9.2537184     0.01     0          1 169.646079 #> 13:  1.2590489  8.9771249     0.01     0          1  37.280804 #> 14: -2.9288774  6.1028044     0.01     0          1  23.823395 #> 15: -3.7873256 12.8749222     0.01     0          1   2.502786 #> 16:  4.8397394  7.7652178     0.01     0          1  87.972692 #> 17: -3.7873256 12.8749222     0.02     1          1   2.491108 #> 18: -1.3260802  4.9397575     0.02     1          1  22.730919 #> 19: -2.9288774  6.1028044     0.02     1          1  23.906122 #> 20: -4.4071897  9.0300579     0.02     1          1  28.181990 #> 21: -0.6764425 10.7277920     0.02     1          1  30.715041 #> 22:  1.2590489  8.9771249     0.02     1          1  37.265167 #> 23:  7.5411296  0.6909546     0.02     1          1  37.157884 #> 24: -0.5637486 14.7492562     0.02     1          1  79.614977 #> 25: -3.7873256 12.8749222     0.04     2          1   2.468986 #> 26: -1.3260802  4.9397575     0.04     2          1  22.753620 #> 27: -2.9288774  6.1028044     0.04     2          1  24.072018 #> 28: -4.4071897  9.0300579     0.04     2          1  28.540104 #> 29: -3.7873256 12.8749222     0.08     3          1   2.429681 #> 30: -1.3260802  4.9397575     0.08     3          1  22.799097 #> 31: -3.7873256 12.8749222     0.16     4          1   2.370823 #>             x1         x2 fidelity stage repetition          y #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity #>                  <POSc>    <int>       <num>       <num>             <num> #>  1: 2025-07-10 07:24:36        1  -4.4071897   9.0300579              0.01 #>  2: 2025-07-10 07:24:36        1   9.1716220   9.8549374              0.01 #>  3: 2025-07-10 07:24:36        1  -1.3260802   4.9397575              0.01 #>  4: 2025-07-10 07:24:36        1   6.7168385  14.6921133              0.01 #>  5: 2025-07-10 07:24:36        1  -0.6764425  10.7277920              0.01 #>  6: 2025-07-10 07:24:36        1   8.1303687  13.0894546              0.01 #>  7: 2025-07-10 07:24:36        1  -0.5637486  14.7492562              0.01 #>  8: 2025-07-10 07:24:36        1   9.7528811   3.2784449              0.01 #>  9: 2025-07-10 07:24:36        1   3.8475633   9.9679510              0.01 #> 10: 2025-07-10 07:24:36        1   6.3873757   5.8434606              0.01 #> 11: 2025-07-10 07:24:36        1   7.5411296   0.6909546              0.01 #> 12: 2025-07-10 07:24:36        1   6.4422920   9.2537184              0.01 #> 13: 2025-07-10 07:24:36        1   1.2590489   8.9771249              0.01 #> 14: 2025-07-10 07:24:36        1  -2.9288774   6.1028044              0.01 #> 15: 2025-07-10 07:24:36        1  -3.7873256  12.8749222              0.01 #> 16: 2025-07-10 07:24:36        1   4.8397394   7.7652178              0.01 #> 17: 2025-07-10 07:24:36        2  -3.7873256  12.8749222              0.02 #> 18: 2025-07-10 07:24:36        2  -1.3260802   4.9397575              0.02 #> 19: 2025-07-10 07:24:36        2  -2.9288774   6.1028044              0.02 #> 20: 2025-07-10 07:24:36        2  -4.4071897   9.0300579              0.02 #> 21: 2025-07-10 07:24:36        2  -0.6764425  10.7277920              0.02 #> 22: 2025-07-10 07:24:36        2   1.2590489   8.9771249              0.02 #> 23: 2025-07-10 07:24:36        2   7.5411296   0.6909546              0.02 #> 24: 2025-07-10 07:24:36        2  -0.5637486  14.7492562              0.02 #> 25: 2025-07-10 07:24:36        3  -3.7873256  12.8749222              0.04 #> 26: 2025-07-10 07:24:36        3  -1.3260802   4.9397575              0.04 #> 27: 2025-07-10 07:24:36        3  -2.9288774   6.1028044              0.04 #> 28: 2025-07-10 07:24:36        3  -4.4071897   9.0300579              0.04 #> 29: 2025-07-10 07:24:36        4  -3.7873256  12.8749222              0.08 #> 30: 2025-07-10 07:24:36        4  -1.3260802   4.9397575              0.08 #> 31: 2025-07-10 07:24:36        5  -3.7873256  12.8749222              0.16 #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"OptimizerAsyncSuccessiveHalving class implements Asynchronous Successive Halving Algorithm (ASHA). class implements asynchronous version OptimizerBatchSuccessiveHalving.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"Li L, Jamieson K, Rostamizadeh , Gonina E, Ben-tzur J, Hardt M, Recht B, Talwalkar (2020). “System Massively Parallel Hyperparameter Tuning.” Dhillon , Papailiopoulos D, Sze V (eds.), Proceedings Machine Learning Systems, volume 2, 230–246. https://proceedings.mlsys.org/paper_files/paper/2020/hash/a06f20b349c6cf09a6b171c71b88bbfc-Abstract.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"mlr3tuning::Tuner can instantiated via dictionary mlr3tuning::mlr_tuners associated sugar function mlr3tuning::tnr():","code":"TunerAsyncSuccessiveHalving$new() mlr_tuners$get(\"async_successive_halving\") tnr(\"async_successive_halving\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"subsample-budget","dir":"Reference","previous_headings":"","what":"Subsample Budget","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"learner lacks natural budget parameter, mlr3pipelines::PipeOpSubsample can applied use subsampling rate budget parameter. resulting mlr3pipelines::GraphLearner fitted small proportions mlr3::Task first stage, complete task last stage.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta configurations promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"bbotk::Archive holds following additional columns specific SHA: stage (integer(1)) Stage index. Starts counting 0. asha_id (character(1)) Unique identifier configuration across stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"mlr3tuning::Tuner -> mlr3tuning::TunerAsync -> mlr3tuning::TunerAsyncFromOptimizerAsync -> TunerAsyncSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$help() mlr3tuning::Tuner$print() mlr3tuning::TunerAsyncFromOptimizerAsync$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"TunerAsyncSuccessiveHalving$new() TunerAsyncSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"","code":"TunerAsyncSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"","code":"TunerAsyncSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_async_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous Hyperparameter Tuning with Successive Halving — mlr_tuners_async_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"Optimizer using Hyperband (HB) algorithm. HB runs Successive Halving Algorithm (SHA) different numbers stating configurations. algorithm initialized parameters Successive Halving without n. run Successive Halving called bracket starts different budget r_0. smaller starting budget means configurations can tried . explorative bracket allocated minimum budget r_min. next bracket increases starting budget factor eta. bracket, starting budget increases last bracket s = 0 essentially performs random search full budget r_max. number brackets s_max + 1 calculated s_max = log(r_min / r_max)(eta). condition r_0 increases eta bracket, r_min sometimes adjusted slightly order use r_max resources last bracket. number configurations base stages calculated bracket uses approximately amount budget. following table shows full run HB eta = 2, r_min = 1 r_max = 8. s bracket number, stage number, n_i number configurations r_i budget allocated single configuration. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage explorative bracket, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"Li L, Jamieson K, DeSalvo G, Rostamizadeh , Talwalkar (2018). “Hyperband: Novel Bandit-Based Approach Hyperparameter Optimization.” Journal Machine Learning Research, 18(185), 1-52. https://jmlr.org/papers/v18/16-558.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"mlr3tuning::Tuner can instantiated via dictionary mlr3tuning::mlr_tuners associated sugar function mlr3tuning::tnr():","code":"TunerBatchHyperband$new() mlr_tuners$get(\"hyperband\") tnr(\"hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"subsample-budget","dir":"Reference","previous_headings":"","what":"Subsample Budget","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"learner lacks natural budget parameter, mlr3pipelines::PipeOpSubsample can applied use subsampling rate budget parameter. resulting mlr3pipelines::GraphLearner fitted small proportions mlr3::Task first stage, complete task last stage.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"$optimize() supports progress bars via package progressr combined bbotk::Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"hyperband implementation evaluates hyperparameter configurations equal budget across brackets one batch. example, configurations stage 1 bracket 3 stage 0 bracket 2 one batch. select parallel backend, use plan() function future package.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"gallery features collection case studies demos optimization. Tune hyperparameters XGBoost Hyperband. Use data subsampling Hyperband optimize support vector machine.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta points promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn base stage bracket. default uniform sampling. repetitions integer(1) 1 (default), optimization stopped brackets evaluated. Otherwise, optimization stopped repetitions runs HB. bbotk::Terminator might stop optimization repetitions executed.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"bbotk::Archive holds following additional columns specific HB: bracket (integer(1)) bracket index. Counts 0. stage (integer(1)) stages bracket. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"mlr3tuning::Tuner -> mlr3tuning::TunerBatch -> mlr3tuning::TunerBatchFromOptimizerBatch -> TunerBatchHyperband","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$help() mlr3tuning::Tuner$print() mlr3tuning::TunerBatchFromOptimizerBatch$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"TunerBatchHyperband$new() TunerBatchHyperband$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"","code":"TunerBatchHyperband$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"","code":"TunerBatchHyperband$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuner Using the Hyperband Algorithm — mlr_tuners_hyperband","text":"","code":"if(requireNamespace(\"xgboost\")) {   library(mlr3learners)    # define hyperparameter and budget parameter   search_space = ps(     nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),     eta = p_dbl(lower = 0, upper = 1),     booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\"))   )    # \\donttest{   # hyperparameter tuning on the pima indians diabetes data set   instance = tune(     tnr(\"hyperband\"),     task = tsk(\"pima\"),     learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),     resampling = rsmp(\"cv\", folds = 3),     measures = msr(\"classif.ce\"),     search_space = search_space,     term_evals = 100   )    # best performing hyperparameter configuration   instance$result   # } } #> Loading required namespace: xgboost #>    nrounds       eta booster learner_param_vals  x_domain classif.ce #>      <num>     <num>  <char>             <list>    <list>      <num> #> 1:       8 0.2256654  gbtree          <list[6]> <list[3]>  0.2161458"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Optimizer using Successive Halving Algorithm (SHA). SHA initialized number starting configurations n, proportion configurations discarded stage eta, minimum r_min maximum _max budget single evaluation. algorithm starts sampling n random configurations allocating minimum budget r_min . configurations evaluated 1 / eta worst-performing configurations discarded. remaining configurations promoted next stage evaluated larger budget. following table stage layout eta = 2, r_min = 1 r_max = 8. stage number, n_i number configurations r_i budget allocated single configuration. number stages calculated stage consumes approximately budget. sometimes results minimum budget slightly adjusted algorithm.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Jamieson K, Talwalkar (2016). “Non-stochastic Best Arm Identification Hyperparameter Optimization.” Gretton , Robert CC (eds.), Proceedings 19th International Conference Artificial Intelligence Statistics, volume 51 series Proceedings Machine Learning Research, 240-248. http://proceedings.mlr.press/v51/jamieson16.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::Tuner can instantiated via dictionary mlr3tuning::mlr_tuners associated sugar function mlr3tuning::tnr():","code":"TunerBatchSuccessiveHalving$new() mlr_tuners$get(\"successive_halving\") tnr(\"successive_halving\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"subsample-budget","dir":"Reference","previous_headings":"","what":"Subsample Budget","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"learner lacks natural budget parameter, mlr3pipelines::PipeOpSubsample can applied use subsampling rate budget parameter. resulting mlr3pipelines::GraphLearner fitted small proportions mlr3::Task first stage, complete task last stage.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"$optimize() supports progress bars via package progressr combined bbotk::Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"hyperparameter configurations one stage evaluated parallel future package. select parallel backend, use plan() function future package.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"gallery features collection case studies demos optimization. Tune hyperparameters XGBoost Hyperband (Hyperband can easily swapped SHA). Use data subsampling Hyperband optimize support vector machine.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"n integer(1) Number configurations base stage. eta numeric(1) every stage, budget increased factor eta best 1 / eta configurations promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling. repetitions integer(1) 1 (default), optimization stopped stages evaluated. Otherwise, optimization stopped repetitions runs SHA. bbotk::Terminator might stop optimization repetitions executed. adjust_minimum_budget logical(1) TRUE, minimum budget increased last stage uses maximum budget defined search space.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"bbotk::Archive holds following additional columns specific SHA: stage (integer(1)) Stage index. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::Tuner -> mlr3tuning::TunerBatch -> mlr3tuning::TunerBatchFromOptimizerBatch -> TunerBatchSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$help() mlr3tuning::Tuner$print() mlr3tuning::TunerBatchFromOptimizerBatch$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"TunerBatchSuccessiveHalving$new() TunerBatchSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"TunerBatchSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"TunerBatchSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"if(requireNamespace(\"xgboost\")) {   library(mlr3learners)    # define hyperparameter and budget parameter   search_space = ps(     nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),     eta = p_dbl(lower = 0, upper = 1),     booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\"))   )    # \\donttest{   # hyperparameter tuning on the pima indians diabetes data set   instance = tune(     tnr(\"successive_halving\"),     task = tsk(\"pima\"),     learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),     resampling = rsmp(\"cv\", folds = 3),     measures = msr(\"classif.ce\"),     search_space = search_space,     term_evals = 100   )    # best performing hyperparameter configuration   instance$result   # } } #>    nrounds       eta booster learner_param_vals  x_domain classif.ce #>      <num>     <num>  <char>             <list>    <list>      <num> #> 1:      16 0.2263371  gbtree          <list[6]> <list[3]>  0.2486979"},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-development-version","dir":"Changelog","previous_headings":"","what":"mlr3hyperband (development version)","title":"mlr3hyperband (development version)","text":"feat: Add OptimizerAsyncSuccessiveHalving optimizer.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-060","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.6.0","title":"mlr3hyperband 0.6.0","text":"CRAN release: 2024-06-29 compatibility: Work new bbotk 1.0.0 mlr3tuning 1.0.0","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-050","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.5.0","title":"mlr3hyperband 0.5.0","text":"CRAN release: 2024-03-05 compatibility: Work new paradox version 1.0.0","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-045","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.4.5","title":"mlr3hyperband 0.4.5","text":"CRAN release: 2023-03-02 fix: Unloading mlr3hyperband removes optimizers tuners dictionaries. docs: Update resources descriptions. tests: Remove deprecated method argument mlr3tuning::tune().","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-044","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.4.4","title":"mlr3hyperband 0.4.4","text":"CRAN release: 2022-11-27 fix: Remove emoa required packages OptimizerBatchSuccessiveHalving.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-043","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.4.3","title":"mlr3hyperband 0.4.3","text":"CRAN release: 2022-11-07 docs: Examples use branin_wu() function now.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-042","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.4.2","title":"mlr3hyperband 0.4.2","text":"CRAN release: 2022-08-25 docs: Re-generate rd files valid html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-041","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.4.1","title":"mlr3hyperband 0.4.1","text":"CRAN release: 2022-05-04 feat: Optimizer Tuner objects field $id now. feat: Optimizer Tuner objects optional field $label now. feat: New $help() method opens manual page Optimizer Tuner objects.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-040","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.4.0","title":"mlr3hyperband 0.4.0","text":"CRAN release: 2022-02-10 feat: New adjust_minimum_budget flag OptimizerBatchSuccessiveHalving. minimum budget adjusted base stage use maximum budget last stage. feat: New repetitions parameter specify exact number repetitions. Replaced repeats parameter.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-030","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.3.0","title":"mlr3hyperband 0.3.0","text":"CRAN release: 2022-01-23 feat: TunerBatchHyperband evaluates configurations budget across brackets parallel now. feat: New repeats parameter repeat runs successive halving hyperband termination. fix: Bug maximization measures minimized.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-020","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.2.0","title":"mlr3hyperband 0.2.0","text":"CRAN release: 2021-09-13 feat: New OptimizerBatchHyperband OptimizerBatchSuccessiveHalving optimizers.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-012","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.2","title":"mlr3hyperband 0.1.2","text":"CRAN release: 2021-01-29 refactor: Make XGBoost conditionally examples.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-011","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.1","title":"mlr3hyperband 0.1.1","text":"CRAN release: 2020-12-07 fix: Dependency emoa.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-010","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.0","title":"mlr3hyperband 0.1.0","text":"CRAN release: 2020-10-26 Initial CRAN release.","code":""}]
