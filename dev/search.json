[{"path":"https://mlr3hyperband.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Becker. Author, maintainer. Sebastian Gruber. Author. Jakob Richter. Author. Julia Moosbauer. Author. Bernd Bischl. Author.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker M, Gruber S, Richter J, Moosbauer J, Bischl B (2022). mlr3hyperband: Hyperband 'mlr3'. https://mlr3hyperband.mlr-org.com, https://github.com/mlr-org/mlr3hyperband.","code":"@Manual{,   title = {mlr3hyperband: Hyperband for 'mlr3'},   author = {Marc Becker and Sebastian Gruber and Jakob Richter and Julia Moosbauer and Bernd Bischl},   year = {2022},   note = {https://mlr3hyperband.mlr-org.com, https://github.com/mlr-org/mlr3hyperband}, }"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"mlr3hyperband","dir":"","previous_headings":"","what":"Hyperband for mlr3","title":"Hyperband for mlr3","text":"Package website: release | dev package provides hyperband tuning mlr3.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Hyperband for mlr3","text":"Install last release CRAN: Install development version GitHub:","code":"install.packages(\"mlr3hyperband\") remotes::install_github(\"mlr-org/mlr3hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Hyperband for mlr3","text":"mlr3book chapter hyperband hyperparameter tuning. original paper introducing hyperband algorithm.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"hyperband","dir":"","previous_headings":"","what":"Hyperband","title":"Hyperband for mlr3","text":"Hyperband budget oriented-procedure, weeding suboptimally performing configurations early training process aiming increasing efficiency tuning procedure. , several brackets constructed associated set configurations bracket. configuration initialized stochastic, often uniform, sampling. bracket divided multiple stages, configurations evaluated increasing budget stage. Note currently configurations trained completely beginning, online updates models performed. Different brackets initialized different number configurations, different budget sizes. identify budget evaluating hyperband, user specify explicitly hyperparameter learner influences budget tagging single hyperparameter parameter set \"budget\". alternative approach using subsampling pipelines described .","code":""},{"path":[]},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"basic","dir":"","previous_headings":"Examples","what":"Basic","title":"Hyperband for mlr3","text":"already familiar mlr3tuning, change compared tuners give numeric hyperparameter budget tag. Afterwards, can handle hyperband like tuners. Originally, hyperband created “natural” learning parameter budget parameter mind, like nrounds XGBoost learner.","code":"library(mlr3verse) library(mlr3hyperband) library(mlr3learners)  # define hyperparameter and budget parameter search_space = ps(   nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),   eta = p_dbl(lower = 0, upper = 1),   booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\")) )  # hyperparameter tuning on the pima indians diabetes data set instance = tune(   method = \"hyperband\",   task = tsk(\"pima\"),   learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   search_space = search_space )  # best performing hyperparameter configuration instance$result ##    nrounds     eta booster learner_param_vals  x_domain classif.ce ## 1:       4 0.27844  gbtree          <list[6]> <list[3]>  0.2682292"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"subsampling","dir":"","previous_headings":"Examples","what":"Subsampling","title":"Hyperband for mlr3","text":"Additionally, also possible use mlr3hyperband tune learners natural fidelity parameter. case mlr3pipelines can used define data subsampling preprocessing step. , frac parameter subsampling, defining fraction training data used, can act budget parameter.","code":"learner = po(\"subsample\") %>>% lrn(\"classif.rpart\")  # define subsampling parameter as budget search_space = ps(   classif.rpart.cp = p_dbl(lower = 0.001, upper = 0.1),   classif.rpart.minsplit = p_int(lower = 1, upper = 10),   subsample.frac = p_dbl(lower = 0.1, upper = 1, tags = \"budget\") )  # hyperparameter tuning on the pima indians diabetes data set instance = tune(   method = \"hyperband\",   task = tsk(\"pima\"),   learner = learner,   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   search_space = search_space )  # best performing hyperparameter configuration instance$result ##    classif.rpart.cp classif.rpart.minsplit subsample.frac learner_param_vals  x_domain classif.ce ## 1:        0.0246659                      5            0.5          <list[6]> <list[3]>  0.2395833"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"successive-halving","dir":"","previous_headings":"Examples","what":"Successive Halving","title":"Hyperband for mlr3","text":"","code":"library(mlr3hyperband) library(mlr3learners)  # define hyperparameter and budget parameter search_space = ps(   nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),   eta = p_dbl(lower = 0, upper = 1),   booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\")) )  # hyperparameter tuning on the pima indians diabetes data set instance = tune(   method = \"successive_halving\",   task = tsk(\"pima\"),   learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   search_space = search_space )  # best performing hyperparameter configuration instance$result ##    nrounds       eta booster learner_param_vals  x_domain classif.ce ## 1:       2 0.8726027    dart          <list[6]> <list[3]>  0.2265625"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"quick-general-purpose-optimization","dir":"","previous_headings":"Examples","what":"Quick general-purpose optimization","title":"Hyperband for mlr3","text":"","code":"library(bbotk) library(mlr3hyperband)  # define hyperparameter and budget parameter search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # modified branin function objective = ObjectiveRFun$new(   fun = branin,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # optimize branin function with hyperband result = bb_optimize(objective, method = \"hyperband\", search_space = search_space, term_evals = NULL)  # optimized parameters result$par ##          x1       x2 fidelity ## 1: 9.739074 2.508206        1 # optimal outcome result$value ##         y  ## 0.9281165"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Budget — hyperband_budget","title":"Hyperband Budget — hyperband_budget","text":"Calculates total budget used hyperband.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Budget — hyperband_budget","text":"","code":"hyperband_budget(r_min, r_max, eta, integer_budget = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Budget — hyperband_budget","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. integer_budget (logical(1)) Determines budget integer.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Budget — hyperband_budget","text":"integer(1)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Configs — hyperband_n_configs","title":"Hyperband Configs — hyperband_n_configs","text":"Calculates many different configurations sampled.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Configs — hyperband_n_configs","text":"","code":"hyperband_n_configs(r_min, r_max, eta)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Configs — hyperband_n_configs","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Configs — hyperband_n_configs","text":"integer(1)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Schedule — hyperband_schedule","title":"Hyperband Schedule — hyperband_schedule","text":"Returns hyperband schedule.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Schedule — hyperband_schedule","text":"","code":"hyperband_schedule(r_min, r_max, eta, integer_budget = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Schedule — hyperband_schedule","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. integer_budget (logical(1)) Determines budget integer.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Schedule — hyperband_schedule","text":"data.table::data.table()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr3hyperband-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","title":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","text":"Implements hyperband method hyperparameter tuning. Various termination criteria can set combined. class 'AutoTuner' provides convenient way perform nested resampling combination 'mlr3'. hyperband algorithm proposed Lisha Li, Kevin Jamieson, Giulia DeSalvo, Afshin Rostamizadeh Ameet Talwalkar (2018) <arXiv:1603.06560>.","code":""},{"path":[]},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr3hyperband-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mlr3hyperband: Hyperband for 'mlr3' — mlr3hyperband-package","text":"Maintainer: Marc Becker marcbecker@posteo.de (ORCID) Authors: Sebastian Gruber gruber_sebastian@t-online.de (ORCID) Jakob Richter jakob1richter@gmail.com (ORCID) Julia Moosbauer ju.moosbauer@googlemail.com (ORCID) Bernd Bischl bernd_bischl@gmx.net (ORCID)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"OptimizerHyperband class implements hyperband optimization (HB). HB repeatedly calls SHA (OptimizerSuccessiveHalving) different numbers starting points. larger number starting points corresponds smaller budget allocated base stage. run SHA within HB called bracket. HB considers s_max + 1 brackets s_max = floor(log(r_max / r_min, eta). explorative bracket s = s_max constructs s_max + 1 stages allocates minimum budget (r_min) base stage. minimum budget increased bracket factor eta number starting points computed bracket approximately spends budget. Use hyperband_schedule() get preview bracket layout. s bracket number, stage number, n_i number configurations r_i budget allocated single configuration. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage explorative bracket, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Li L, Jamieson K, DeSalvo G, Rostamizadeh , Talwalkar (2018). “Hyperband: Novel Bandit-Based Approach Hyperparameter Optimization.” Journal Machine Learning Research, 18(185), 1-52. https://jmlr.org/papers/v18/16-558.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"hyperband\") opt(\"hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta points promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn base stage bracket. default uniform sampling. repetitions integer(1) 1 (default), optimization stopped brackets evaluated. Otherwise, optimization stopped repetitions runs hyperband. bbotk::Terminator might stop optimization repetitions executed.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"bbotk::Archive holds following additional columns specific hyperband algorithm: bracket (integer(1)) bracket index. Counts 0. stage (integer(1)) stages bracket. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom sampler","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"bbotk::Optimizer -> OptimizerHyperband","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"bbotk::Optimizer$format() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"OptimizerHyperband$new() OptimizerHyperband$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"","code":"OptimizerHyperband$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"","code":"OptimizerHyperband$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"","code":"library(bbotk) library(data.table)  # set search space search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # objective with modified branin function, see `bbotk::branin()` objective = ObjectiveRFun$new(   fun = branin,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # initialize instance and optimizer instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 50) )  optimizer = opt(\"hyperband\")  # optimize branin function optimizer$optimize(instance) #>          x1       x2 fidelity  x_domain         y #> 1: 3.030692 1.980788 0.015625 <list[3]> 0.7292225  # best scoring evaluation instance$result #>          x1       x2 fidelity  x_domain         y #> 1: 3.030692 1.980788 0.015625 <list[3]> 0.7292225  # all evaluations as.data.table(instance$archive) #>              x1         x2 fidelity stage bracket repetition           y #>  1:  2.89474788  3.3822337 0.015625     0       6          1   3.6878037 #>  2:  6.24582577  9.5195012 0.015625     0       6          1 169.9174884 #>  3: -2.30666318  9.1075893 0.015625     0       6          1   4.0835572 #>  4:  3.90870732  0.1840020 0.015625     0       6          1   3.0914884 #>  5:  7.28311474  3.9879899 0.015625     0       6          1  78.3671076 #>  6:  5.32963600  5.4448165 0.015625     0       6          1  65.3140945 #>  7:  2.11475422 10.1174460 0.015625     0       6          1  58.9896002 #>  8:  0.65647097  0.6196245 0.015625     0       6          1  36.5185588 #>  9: -2.58167303  6.7641243 0.015625     0       6          1  14.4642787 #> 10: -1.55335889 10.9749383 0.015625     0       6          1  16.0650433 #> 11: -4.35005542  6.2993553 0.015625     0       6          1  58.5199872 #> 12:  3.50313196 12.8466360 0.015625     0       6          1 146.0938722 #> 13:  0.48947124 13.8639210 0.015625     0       6          1  93.0477554 #> 14: -4.47699491 10.0667379 0.015625     0       6          1  21.2654109 #> 15:  3.71479377  7.2388334 0.015625     0       6          1  47.1826002 #> 16:  2.20310730  3.3900045 0.015625     0       6          1   4.8832425 #> 17:  6.38698806 11.2734201 0.015625     0       6          1 220.7460881 #> 18:  2.84490413  2.5893465 0.015625     0       6          1   1.5713530 #> 19:  1.38484857  9.0816003 0.015625     0       6          1  39.0934924 #> 20:  1.26913587  7.6881773 0.015625     0       6          1  26.2378007 #> 21: -0.46948335  7.3419828 0.015625     0       6          1  18.9089284 #> 22: -3.84023792 10.2395564 0.015625     0       6          1   8.0569239 #> 23: -0.39131110  4.9359820 0.015625     0       6          1  21.7375172 #> 24:  7.53451532 10.9447723 0.015625     0       6          1 243.7776028 #> 25:  6.82320579  1.4460900 0.015625     0       6          1  41.9925387 #> 26:  3.03069182  1.9807875 0.015625     0       6          1   0.7292225 #> 27:  2.29051741 11.1922431 0.015625     0       6          1  78.9504719 #> 28: -3.79868621  5.7685615 0.015625     0       6          1  47.5680289 #> 29: -0.27011984  4.8562263 0.015625     0       6          1  21.7374733 #> 30: -3.43455171 11.5656993 0.015625     0       6          1   0.8763030 #> 31: -4.76601894  6.5692077 0.015625     0       6          1  70.0292022 #> 32:  4.79026472  3.1098983 0.015625     0       6          1  26.9742248 #> 33:  6.48624736  4.3224392 0.015625     0       6          1  73.4575018 #> 34: -4.53639667  7.0586245 0.015625     0       6          1  54.4774452 #> 35: -0.37504628 11.0374802 0.015625     0       6          1  38.6149957 #> 36:  9.81038082 10.1009324 0.015625     0       6          1 281.8476035 #> 37:  1.37323946 11.7114331 0.015625     0       6          1  73.3350276 #> 38:  6.47005720  4.9854455 0.015625     0       6          1  83.3668186 #> 39:  9.79149333  8.6447404 0.015625     0       6          1 234.5320740 #> 40: -1.08535321  2.1251589 0.015625     0       6          1  46.2725134 #> 41:  5.33852216 10.6749397 0.015625     0       6          1 166.7983783 #> 42: -2.54815385  6.2350593 0.015625     0       6          1  18.2008085 #> 43:  7.48132564  3.0492867 0.015625     0       6          1  65.8451544 #> 44:  0.47608233  3.6714362 0.015625     0       6          1  21.0238602 #> 45:  2.46239413  8.7132454 0.015625     0       6          1  44.0776293 #> 46:  5.49460365  4.2559211 0.015625     0       6          1  53.6443165 #> 47:  8.40245696  9.8849954 0.015625     0       6          1 232.6154591 #> 48:  1.54424850  8.4481557 0.015625     0       6          1  33.6087244 #> 49:  1.35570888  2.9457171 0.015625     0       6          1  12.9578375 #> 50: -1.14525267  5.5876927 0.015625     0       6          1  19.1411757 #> 51:  8.47992039  1.9731035 0.015625     0       6          1  57.0578450 #> 52: -4.62222509 11.5764361 0.015625     0       6          1  15.0742429 #> 53:  3.83221269 12.4320739 0.015625     0       6          1 148.5169584 #> 54:  0.05666191  3.6905481 0.015625     0       6          1  24.5123077 #> 55:  5.39833318  5.8436744 0.015625     0       6          1  72.9239523 #> 56:  1.46656230  5.9715655 0.015625     0       6          1  16.0145998 #> 57:  1.89325796 13.7167248 0.015625     0       6          1 119.7356921 #> 58: -3.59972669 10.0440694 0.015625     0       6          1   5.7290124 #> 59:  6.58052865  1.7603664 0.015625     0       6          1  43.2118718 #> 60:  5.71264247  5.8122575 0.015625     0       6          1  80.5039145 #> 61: -2.48894649  1.3368751 0.015625     0       6          1  80.0734185 #> 62:  7.77265656  3.2913920 0.015625     0       6          1  71.6887461 #> 63: -1.23985924  8.0233061 0.015625     0       6          1  13.1200163 #> 64: -0.33501261  3.2114835 0.015625     0       6          1  30.1249598 #>              x1         x2 fidelity stage bracket repetition           y #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity #>  1: 2022-02-09 04:29:31        1  2.89474788   3.3822337          0.015625 #>  2: 2022-02-09 04:29:31        1  6.24582577   9.5195012          0.015625 #>  3: 2022-02-09 04:29:31        1 -2.30666318   9.1075893          0.015625 #>  4: 2022-02-09 04:29:31        1  3.90870732   0.1840020          0.015625 #>  5: 2022-02-09 04:29:31        1  7.28311474   3.9879899          0.015625 #>  6: 2022-02-09 04:29:31        1  5.32963600   5.4448165          0.015625 #>  7: 2022-02-09 04:29:31        1  2.11475422  10.1174460          0.015625 #>  8: 2022-02-09 04:29:31        1  0.65647097   0.6196245          0.015625 #>  9: 2022-02-09 04:29:31        1 -2.58167303   6.7641243          0.015625 #> 10: 2022-02-09 04:29:31        1 -1.55335889  10.9749383          0.015625 #> 11: 2022-02-09 04:29:31        1 -4.35005542   6.2993553          0.015625 #> 12: 2022-02-09 04:29:31        1  3.50313196  12.8466360          0.015625 #> 13: 2022-02-09 04:29:31        1  0.48947124  13.8639210          0.015625 #> 14: 2022-02-09 04:29:31        1 -4.47699491  10.0667379          0.015625 #> 15: 2022-02-09 04:29:31        1  3.71479377   7.2388334          0.015625 #> 16: 2022-02-09 04:29:31        1  2.20310730   3.3900045          0.015625 #> 17: 2022-02-09 04:29:31        1  6.38698806  11.2734201          0.015625 #> 18: 2022-02-09 04:29:31        1  2.84490413   2.5893465          0.015625 #> 19: 2022-02-09 04:29:31        1  1.38484857   9.0816003          0.015625 #> 20: 2022-02-09 04:29:31        1  1.26913587   7.6881773          0.015625 #> 21: 2022-02-09 04:29:31        1 -0.46948335   7.3419828          0.015625 #> 22: 2022-02-09 04:29:31        1 -3.84023792  10.2395564          0.015625 #> 23: 2022-02-09 04:29:31        1 -0.39131110   4.9359820          0.015625 #> 24: 2022-02-09 04:29:31        1  7.53451532  10.9447723          0.015625 #> 25: 2022-02-09 04:29:31        1  6.82320579   1.4460900          0.015625 #> 26: 2022-02-09 04:29:31        1  3.03069182   1.9807875          0.015625 #> 27: 2022-02-09 04:29:31        1  2.29051741  11.1922431          0.015625 #> 28: 2022-02-09 04:29:31        1 -3.79868621   5.7685615          0.015625 #> 29: 2022-02-09 04:29:31        1 -0.27011984   4.8562263          0.015625 #> 30: 2022-02-09 04:29:31        1 -3.43455171  11.5656993          0.015625 #> 31: 2022-02-09 04:29:31        1 -4.76601894   6.5692077          0.015625 #> 32: 2022-02-09 04:29:31        1  4.79026472   3.1098983          0.015625 #> 33: 2022-02-09 04:29:31        1  6.48624736   4.3224392          0.015625 #> 34: 2022-02-09 04:29:31        1 -4.53639667   7.0586245          0.015625 #> 35: 2022-02-09 04:29:31        1 -0.37504628  11.0374802          0.015625 #> 36: 2022-02-09 04:29:31        1  9.81038082  10.1009324          0.015625 #> 37: 2022-02-09 04:29:31        1  1.37323946  11.7114331          0.015625 #> 38: 2022-02-09 04:29:31        1  6.47005720   4.9854455          0.015625 #> 39: 2022-02-09 04:29:31        1  9.79149333   8.6447404          0.015625 #> 40: 2022-02-09 04:29:31        1 -1.08535321   2.1251589          0.015625 #> 41: 2022-02-09 04:29:31        1  5.33852216  10.6749397          0.015625 #> 42: 2022-02-09 04:29:31        1 -2.54815385   6.2350593          0.015625 #> 43: 2022-02-09 04:29:31        1  7.48132564   3.0492867          0.015625 #> 44: 2022-02-09 04:29:31        1  0.47608233   3.6714362          0.015625 #> 45: 2022-02-09 04:29:31        1  2.46239413   8.7132454          0.015625 #> 46: 2022-02-09 04:29:31        1  5.49460365   4.2559211          0.015625 #> 47: 2022-02-09 04:29:31        1  8.40245696   9.8849954          0.015625 #> 48: 2022-02-09 04:29:31        1  1.54424850   8.4481557          0.015625 #> 49: 2022-02-09 04:29:31        1  1.35570888   2.9457171          0.015625 #> 50: 2022-02-09 04:29:31        1 -1.14525267   5.5876927          0.015625 #> 51: 2022-02-09 04:29:31        1  8.47992039   1.9731035          0.015625 #> 52: 2022-02-09 04:29:31        1 -4.62222509  11.5764361          0.015625 #> 53: 2022-02-09 04:29:31        1  3.83221269  12.4320739          0.015625 #> 54: 2022-02-09 04:29:31        1  0.05666191   3.6905481          0.015625 #> 55: 2022-02-09 04:29:31        1  5.39833318   5.8436744          0.015625 #> 56: 2022-02-09 04:29:31        1  1.46656230   5.9715655          0.015625 #> 57: 2022-02-09 04:29:31        1  1.89325796  13.7167248          0.015625 #> 58: 2022-02-09 04:29:31        1 -3.59972669  10.0440694          0.015625 #> 59: 2022-02-09 04:29:31        1  6.58052865   1.7603664          0.015625 #> 60: 2022-02-09 04:29:31        1  5.71264247   5.8122575          0.015625 #> 61: 2022-02-09 04:29:31        1 -2.48894649   1.3368751          0.015625 #> 62: 2022-02-09 04:29:31        1  7.77265656   3.2913920          0.015625 #> 63: 2022-02-09 04:29:31        1 -1.23985924   8.0233061          0.015625 #> 64: 2022-02-09 04:29:31        1 -0.33501261   3.2114835          0.015625 #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"OptimizerSuccessiveHalving class implements successive halving algorithm (SHA). SHA randomly samples n candidate points allocates minimum budget (r_min) candidates. candidates raced stages single best candidate repeatedly increasing budget factor eta promoting best 1 / eta  fraction next stage. means promising points allocated higher budget overall lower performing ones discarded early . #' budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage, set lower bound budget parameter. upper bound  defines maximum budget (r_max) allocated candidates last stage. number stages computed candidate base stage allocated minimum budget candidates last stage evaluated maximum budget. following table stage layout eta = 2, r_min = 1 r_max = 8. stage number, n_i number configurations r_i budget allocated single configuration.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Jamieson K, Talwalkar (2016). “Non-stochastic Best Arm Identification Hyperparameter Optimization.” Gretton , Robert CC (eds.), Proceedings 19th International Conference Artificial Intelligence Statistics, volume 51 series Proceedings Machine Learning Research, 240-248. http://proceedings.mlr.press/v51/jamieson16.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"n integer(1) Number points base stage. eta numeric(1) every stage, budget increased factor eta best 1 / eta points promoted next stage. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling. repetitions integer(1) 1 (default), optimization stopped stages evaluated. Otherwise, optimization stopped repetitions runs SHA. bbotk::Terminator might stop optimization repetitions executed. adjust_minimum_budget logical(1) TRUE, minimum budget increased last stage uses maximum budget defined search space.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Archive holds following additional columns specific successive halving algorithm: stage (integer(1)) Stage index. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom sampler","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Optimizer -> OptimizerSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Optimizer$format() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"OptimizerSuccessiveHalving$new() OptimizerSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"OptimizerSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"OptimizerSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"library(bbotk) library(data.table)  # set search space search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # objective with modified branin function, see `bbotk::branin()` objective = ObjectiveRFun$new(   fun = branin,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # initialize instance and optimizer instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 50) )  optimizer = opt(\"successive_halving\")  # optimize branin function optimizer$optimize(instance) #>           x1      x2 fidelity  x_domain        y #> 1: -1.307757 7.68001     0.01 <list[3]> 12.70189  # best scoring evaluation instance$result #>           x1      x2 fidelity  x_domain        y #> 1: -1.307757 7.68001     0.01 <list[3]> 12.70189  # all evaluations as.data.table(instance$archive) #>             x1        x2 fidelity stage repetition         y #>  1:  8.3920450  4.320787     0.01     0          1  96.30754 #>  2:  0.1465014  7.145847     0.01     0          1  21.39914 #>  3:  0.9340843  3.083562     0.01     0          1  17.82931 #>  4: -1.3077571  7.680010     0.01     0          1  12.70189 #>  5:  4.3528796 14.223314     0.01     0          1 219.17531 #>  6:  5.1718381 13.548090     0.01     0          1 238.41748 #>  7:  3.6285160  4.656171     0.01     0          1  17.78478 #>  8:  6.3694324  3.750663     0.01     0          1  63.96670 #>  9: -0.4431879  5.393467     0.01     0          1  20.41109 #> 10:  9.5563398  7.650315     0.01     0          1 199.37953 #> 11: -0.7966134 10.936793     0.01     0          1  30.03410 #> 12:  2.3159852 12.996517     0.01     0          1 114.17212 #> 13:  7.5869654 10.899781     0.01     0          1 244.70976 #> 14: -1.3120523 14.125564     0.01     0          1  48.28194 #> 15:  9.6841757 14.300671     0.01     0          1 436.80687 #> 16:  7.0723964  6.873418     0.01     0          1 129.54167 #> 17: -1.3077571  7.680010     0.02     1          1  12.70344 #> 18:  3.6285160  4.656171     0.02     1          1  17.67873 #> 19:  0.9340843  3.083562     0.02     1          1  17.83185 #> 20: -0.4431879  5.393467     0.02     1          1  20.41160 #> 21:  0.1465014  7.145847     0.02     1          1  21.39908 #> 22: -0.7966134 10.936793     0.02     1          1  30.02947 #> 23: -1.3120523 14.125564     0.02     1          1  48.26134 #> 24:  6.3694324  3.750663     0.02     1          1  63.42769 #> 25: -1.3077571  7.680010     0.04     2          1  12.70657 #> 26:  3.6285160  4.656171     0.04     2          1  17.46769 #> 27:  0.9340843  3.083562     0.04     2          1  17.83694 #> 28: -0.4431879  5.393467     0.04     2          1  20.41264 #> 29: -1.3077571  7.680010     0.08     3          1  12.71288 #> 30:  3.6285160  4.656171     0.08     3          1  17.04975 #> 31: -1.3077571  7.680010     0.16     4          1  12.72579 #>             x1        x2 fidelity stage repetition         y #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity #>  1: 2022-02-09 04:29:32        1   8.3920450    4.320787              0.01 #>  2: 2022-02-09 04:29:32        1   0.1465014    7.145847              0.01 #>  3: 2022-02-09 04:29:32        1   0.9340843    3.083562              0.01 #>  4: 2022-02-09 04:29:32        1  -1.3077571    7.680010              0.01 #>  5: 2022-02-09 04:29:32        1   4.3528796   14.223314              0.01 #>  6: 2022-02-09 04:29:32        1   5.1718381   13.548090              0.01 #>  7: 2022-02-09 04:29:32        1   3.6285160    4.656171              0.01 #>  8: 2022-02-09 04:29:32        1   6.3694324    3.750663              0.01 #>  9: 2022-02-09 04:29:32        1  -0.4431879    5.393467              0.01 #> 10: 2022-02-09 04:29:32        1   9.5563398    7.650315              0.01 #> 11: 2022-02-09 04:29:32        1  -0.7966134   10.936793              0.01 #> 12: 2022-02-09 04:29:32        1   2.3159852   12.996517              0.01 #> 13: 2022-02-09 04:29:32        1   7.5869654   10.899781              0.01 #> 14: 2022-02-09 04:29:32        1  -1.3120523   14.125564              0.01 #> 15: 2022-02-09 04:29:32        1   9.6841757   14.300671              0.01 #> 16: 2022-02-09 04:29:32        1   7.0723964    6.873418              0.01 #> 17: 2022-02-09 04:29:32        2  -1.3077571    7.680010              0.02 #> 18: 2022-02-09 04:29:32        2   3.6285160    4.656171              0.02 #> 19: 2022-02-09 04:29:32        2   0.9340843    3.083562              0.02 #> 20: 2022-02-09 04:29:32        2  -0.4431879    5.393467              0.02 #> 21: 2022-02-09 04:29:32        2   0.1465014    7.145847              0.02 #> 22: 2022-02-09 04:29:32        2  -0.7966134   10.936793              0.02 #> 23: 2022-02-09 04:29:32        2  -1.3120523   14.125564              0.02 #> 24: 2022-02-09 04:29:32        2   6.3694324    3.750663              0.02 #> 25: 2022-02-09 04:29:32        3  -1.3077571    7.680010              0.04 #> 26: 2022-02-09 04:29:32        3   3.6285160    4.656171              0.04 #> 27: 2022-02-09 04:29:32        3   0.9340843    3.083562              0.04 #> 28: 2022-02-09 04:29:32        3  -0.4431879    5.393467              0.04 #> 29: 2022-02-09 04:29:32        4  -1.3077571    7.680010              0.08 #> 30: 2022-02-09 04:29:32        4   3.6285160    4.656171              0.08 #> 31: 2022-02-09 04:29:32        5  -1.3077571    7.680010              0.16 #>               timestamp batch_nr x_domain_x1 x_domain_x2 x_domain_fidelity"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"TunerHyperband class implements hyperband tuning (HBX). HBX repeatedly calls SHA (TunerSuccessiveHalving) different numbers starting configurations. larger number starting configurations corresponds smaller budget allocated base stage. run SHA within HBX called bracket. HBX considers s_max + 1 brackets s_max = floor(log(r_max / r_min, eta). explorative bracket s = s_max constructs s_max + 1 stages allocates minimum budget (r_min) base stage. minimum budget increased bracket factor eta number starting configurations computed bracket approximately spends budget. Use hyperband_schedule() get preview bracket layout. s bracket number, stage number, n_i number configurations r_i budget allocated single configuration. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage explorative bracket, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Li L, Jamieson K, DeSalvo G, Rostamizadeh , Talwalkar (2018). “Hyperband: Novel Bandit-Based Approach Hyperparameter Optimization.” Journal Machine Learning Research, 18(185), 1-52. https://jmlr.org/papers/v18/16-558.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"hyperband\") opt(\"hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta configurations promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn base stage bracket. default uniform sampling. repetitions integer(1) 1 (default), optimization stopped brackets evaluated. Otherwise, optimization stopped repetitions runs hyperband. bbotk::Terminator might stop optimization repetitions executed.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"mlr3tuning::ArchiveTuning holds following additional columns specific hyperband algorithm: bracket (integer(1)) bracket index. Counts 0. stage (integer(1)) stages bracket. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"hyperband-without-learner-budget","dir":"Reference","previous_headings":"","what":"Hyperband without learner budget","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Thanks mlr3pipelines, possible use hyperband combination learners lacking natural budget parameter. example, mlr3::Learner can augmented mlr3pipelines::PipeOp operator mlr3pipelines::PipeOpSubsample. subsampling rate budget parameter, resulting mlr3pipelines::GraphLearner fitted small proportions mlr3::Task first brackets, complete Task last brackets. See examples code.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom sampler","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"hyperband implementation evaluates hyperparameter configurations equal budget across brackets one batch. example, configurations stage 1 bracket 3 stage 0 bracket 2 one batch. select parallel backend, use future::plan().","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"mlr3tuning::Tuner -> mlr3tuning::TunerFromOptimizer -> TunerHyperband","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$print() mlr3tuning::TunerFromOptimizer$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"TunerHyperband$new() TunerHyperband$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"","code":"TunerHyperband$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"","code":"TunerHyperband$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"","code":"if(requireNamespace(\"xgboost\")) {   library(mlr3learners)    # define hyperparameter and budget parameter   search_space = ps(     nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),     eta = p_dbl(lower = 0, upper = 1),     booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\"))   )    # \\donttest{   # hyperparameter tuning on the pima indians diabetes data set   instance = tune(     method = \"hyperband\",     task = tsk(\"pima\"),     learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),     resampling = rsmp(\"cv\", folds = 3),     measures = msr(\"classif.ce\"),     search_space = search_space,     term_evals = 100   )    # best performing hyperparameter configuration   instance$result   # } } #> Loading required namespace: xgboost #>    nrounds       eta booster learner_param_vals  x_domain classif.ce #> 1:      16 0.3904514  gbtree          <list[6]> <list[3]>  0.2421875"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"TunerSuccessiveHalving class implements successive halving algorithm (SHA). SHA randomly samples n candidate hyperparameter configurations allocates minimum budget (r_min) candidates. candidates raced stages single best candidate repeatedly increasing budget factor eta promoting best 1 / eta  fraction next stage. means promising hyperparameter configurations allocated higher budget overall lower performing ones discarded early . budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage, set lower bound budget parameter. upper bound  defines maximum budget (r_max) allocated candidates last stage. number stages computed candidate base stage allocated minimum budget candidates last stage evaluated maximum budget. following table stage layout eta = 2, r_min = 1 r_max = 8. stage number, n_i number configurations r_i budget allocated single configuration.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Jamieson K, Talwalkar (2016). “Non-stochastic Best Arm Identification Hyperparameter Optimization.” Gretton , Robert CC (eds.), Proceedings 19th International Conference Artificial Intelligence Statistics, volume 51 series Proceedings Machine Learning Research, 240-248. http://proceedings.mlr.press/v51/jamieson16.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"n integer(1) Number candidates base stage. eta numeric(1) every stage, budget increased factor eta best 1 / eta candidates promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling. repeats logical(1) FALSE (default), SHA terminates stages evaluated. Otherwise, SHA starts last stage evaluated. adjust_minimum_budget logical(1) TRUE, minimum budget increased last stage uses maximum budget defined search space.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::ArchiveTuning holds following additional columns specific successive halving algorithm: stage (integer(1)) Stage index. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom sampler","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Hyperband supports custom paradox::Sampler object initial configurations bracket. custom sampler may look like (full example given examples section):","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"hyperparameter configurations one stage evaluated parallel future package. select parallel backend, use future::plan().","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Hyperband uses logger (implemented lgr) package bbotk. Use lgr::get_logger(\"bbotk\") access control logger.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::Tuner -> mlr3tuning::TunerFromOptimizer -> TunerSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$print() mlr3tuning::TunerFromOptimizer$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"TunerSuccessiveHalving$new() TunerSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"TunerSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"TunerSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"if(requireNamespace(\"xgboost\")) {   library(mlr3learners)    # define hyperparameter and budget parameter   search_space = ps(     nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),     eta = p_dbl(lower = 0, upper = 1),     booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\"))   )    # \\donttest{   # hyperparameter tuning on the pima indians diabetes data set   instance = tune(     method = \"successive_halving\",     task = tsk(\"pima\"),     learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),     resampling = rsmp(\"cv\", folds = 3),     measures = msr(\"classif.ce\"),     search_space = search_space,     term_evals = 100   )    # best performing hyperparameter configuration   instance$result   # } } #>    nrounds      eta booster learner_param_vals  x_domain classif.ce #> 1:       8 0.652673    dart          <list[6]> <list[3]>  0.2382812"},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-0309000","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.3.0.9000","title":"mlr3hyperband 0.3.0.9000","text":"feat: adjust_minimum_budget flag OptimizerSuccessiveHalving use maximum budget last stage. feat: repeats parameter replaced repetitions allows specify exact number repetitions.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-030","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.3.0","title":"mlr3hyperband 0.3.0","text":"CRAN release: 2022-01-23 Implements parallel evaluation stages. Number repetitions can set repeats parameter. Fixed maximization bug.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-020","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.2.0","title":"mlr3hyperband 0.2.0","text":"CRAN release: 2021-09-13 Adds OptimizerHyperband. Adds OptimizerSuccessiveHalving.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-012","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.2","title":"mlr3hyperband 0.1.2","text":"CRAN release: 2021-01-29 Internal changes .","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-011","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.1","title":"mlr3hyperband 0.1.1","text":"CRAN release: 2020-12-07 Fixed dependency emoa.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-010","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.0","title":"mlr3hyperband 0.1.0","text":"CRAN release: 2020-10-26 Initial CRAN release.","code":""}]
